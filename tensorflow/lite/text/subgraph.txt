$9 = {
  _vptr.Subgraph = 0xe64868 <vtable for tflite::Subgraph+16>, 
  static kTensorsReservedCapacity = 128, 
  static kTensorsCapacityHeadroom = 16, 
  tensors_ = std::vector of length 103, capacity 128 = {{
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6cd81ac, 
        u32 = 0x7ffff6cd81ac, 
        i64 = 0x7ffff6cd81ac, 
        u64 = 0x7ffff6cd81ac, 
        f = 0x7ffff6cd81ac, 
        f16 = 0x7ffff6cd81ac, 
        f64 = 0x7ffff6cd81ac, 
        raw = 0x7ffff6cd81ac "\306\021\035:zG习w\211\272`\024b:\363\225\222\271\360\234m\272dwo:e榹\340;\211\272\276\270\226\267˜\255\272\244\021Ӻn\366\210\071\v\027j\272r\037\267\272H\177\200\271+\252\274\272\023\254\340\272p\033\223\065i\203y\272(mպ\345\277\372\271\220;\255\272\364\274\340\272(_7\272\276\342ݺ\233\t\340\272{\235\241\276NҺ\276Sy/\276a15\276\024\224y\276P\340Ͻ\034i\001>\020\337\314=\300g\177=\304\377\213\275l\322<\275\001p\312:\265\231\357\275i\211ֽ\346\207]\275\370\314H\275\234a\352\274{\331(\275\033\317\301\274\360\267\376\273d", 
        raw_const = 0x7ffff6cd81ac "\306\021\035:zG习w\211\272`\024b:\363\225\222\271\360\234m\272dwo:e榹\340;\211\272\276\270\226\267˜\255\272\244\021Ӻn\366\210\071\v\027j\272r\037\267\272H\177\200\271+\252\274\272\023\254\340\272p\033\223\065i\203y\272(mպ\345\277\372\271\220;\255\272\364\274\340\272(_7\272\276\342ݺ\233\t\340\272{\235\241\276NҺ\276Sy/\276a15\276\024\224y\276P\340Ͻ\034i\001>\020\337\314=\300g\177=\304\377\213\275l\322<\275\001p\312:\265\231\357\275i\211ֽ\346\207]\275\370\314H\275\234a\352\274{\331(\275\033\317\301\274\360\267\376\273d", 
        uint8 = 0x7ffff6cd81ac "\306\021\035:zG习w\211\272`\024b:\363\225\222\271\360\234m\272dwo:e榹\340;\211\272\276\270\226\267˜\255\272\244\021Ӻn\366\210\071\v\027j\272r\037\267\272H\177\200\271+\252\274\272\023\254\340\272p\033\223\065i\203y\272(mպ\345\277\372\271\220;\255\272\364\274\340\272(_7\272\276\342ݺ\233\t\340\272{\235\241\276NҺ\276Sy/\276a15\276\024\224y\276P\340Ͻ\034i\001>\020\337\314=\300g\177=\304\377\213\275l\322<\275\001p\312:\265\231\357\275i\211ֽ\346\207]\275\370\314H\275\234a\352\274{\331(\275\033\317\301\274\360\267\376\273d", 
        b = 0x7ffff6cd81ac, 
        i16 = 0x7ffff6cd81ac, 
        c64 = 0x7ffff6cd81ac, 
        c128 = 0x7ffff6cd81ac, 
        int8 = 0x7ffff6cd81ac "\306\021\035:zG习w\211\272`\024b:\363\225\222\271\360\234m\272dwo:e榹\340;\211\272\276\270\226\267˜\255\272\244\021Ӻn\366\210\071\v\027j\272r\037\267\272H\177\200\271+\252\274\272\023\254\340\272p\033\223\065i\203y\272(mպ\345\277\372\271\220;\255\272\364\274\340\272(_7\272\276\342ݺ\233\t\340\272{\235\241\276NҺ\276Sy/\276a15\276\024\224y\276P\340Ͻ\034i\001>\020\337\314=\300g\177=\304\377\213\275l\322<\275\001p\312:\265\231\357\275i\211ֽ\346\207]\275\370\314H\275\234a\352\274{\331(\275\033\317\301\274\360\267\376\273d", 
        data = 0x7ffff6cd81ac
      }, 
      dims = 0xe8d490, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 3456, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce5754 "MobilenetV1/Conv2d_0/weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff62e83ac, 
        u32 = 0x7ffff62e83ac, 
        i64 = 0x7ffff62e83ac, 
        u64 = 0x7ffff62e83ac, 
        f = 0x7ffff62e83ac, 
        f16 = 0x7ffff62e83ac, 
        f64 = 0x7ffff62e83ac, 
        raw = 0x7ffff62e83ac "g(\356\276\330\064\234\275ծ\273>c\352\b?\201G6\276\274庾\365\366\306=6\343q\273\325G\230=", 
        raw_const = 0x7ffff62e83ac "g(\356\276\330\064\234\275ծ\273>c\352\b?\201G6\276\274庾\365\366\306=6\343q\273\325G\230=", 
        uint8 = 0x7ffff62e83ac "g(\356\276\330\064\234\275ծ\273>c\352\b?\201G6\276\274庾\365\366\306=6\343q\273\325G\230=", 
        b = 0x7ffff62e83ac, 
        i16 = 0x7ffff62e83ac, 
        c64 = 0x7ffff62e83ac, 
        c128 = 0x7ffff62e83ac, 
        int8 = 0x7ffff62e83ac "g(\356\276\330\064\234\275ծ\273>c\352\b?\201G6\276\274庾\365\366\306=6\343q\273\325G\230=", 
        data = 0x7ffff62e83ac
      }, 
      dims = 0xe8d4b0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 18432, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce4870 "MobilenetV1/Conv2d_10_depthwise/depthwise_weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff66ea164, 
        u32 = 0x7ffff66ea164, 
        i64 = 0x7ffff66ea164, 
        u64 = 0x7ffff66ea164, 
        f = 0x7ffff66ea164, 
        f16 = 0x7ffff66ea164, 
        f64 = 0x7ffff66ea164, 
        raw = 0x7ffff66ea164 "|\362\264\273\322d\343\274\037J\n=VeC=xKl=>[\246<\033\002?\274V\017\252<\226Sv<u\204\241<", 
        raw_const = 0x7ffff66ea164 "|\362\264\273\322d\343\274\037J\n=VeC=xKl=>[\246<\033\002?\274V\017\252<\226Sv<u\204\241<", 
        uint8 = 0x7ffff66ea164 "|\362\264\273\322d\343\274\037J\n=VeC=xKl=>[\246<\033\002?\274V\017\252<\226Sv<u\204\241<", 
        b = 0x7ffff66ea164, 
        i16 = 0x7ffff66ea164, 
        c64 = 0x7ffff66ea164, 
        c128 = 0x7ffff66ea164, 
        int8 = 0x7ffff66ea164 "|\362\264\273\322d\343\274\037J\n=VeC=xKl=>[\246<\033\002?\274V\017\252<\226Sv<u\204\241<", 
        data = 0x7ffff66ea164
      }, 
      dims = 0xe8d4d0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 1048576, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce5468 "MobilenetV1/Conv2d_10_pointwise/weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff67ea174, 
        u32 = 0x7ffff67ea174, 
        i64 = 0x7ffff67ea174, 
        u64 = 0x7ffff67ea174, 
        f = 0x7ffff67ea174, 
        f16 = 0x7ffff67ea174, 
        f64 = 0x7ffff67ea174, 
        raw = 0x7ffff67ea174 "\245\340T>\231\021+>\303\352\261<\n\245K>5\331x>\027`l=z\264\027\275є/\277\222PN\276ĭ\004\277\231\222\352>\335l?>\227\275A\276\305\367\346>\024\341žd\217\216\276\233\337\313>\265\004\021\276\215\vY>e\327S\276w\262Y\276\006C\003>(\v\222\275\060;Ⱦ\233\365\254\276\212\231\206\276\203!\375\275\302\062\256=\177\265g>\347\016\373>\261\233\217\276'\242\264>\236S\221\277\367$\023?", 
        raw_const = 0x7ffff67ea174 "\245\340T>\231\021+>\303\352\261<\n\245K>5\331x>\027`l=z\264\027\275є/\277\222PN\276ĭ\004\277\231\222\352>\335l?>\227\275A\276\305\367\346>\024\341žd\217\216\276\233\337\313>\265\004\021\276\215\vY>e\327S\276w\262Y\276\006C\003>(\v\222\275\060;Ⱦ\233\365\254\276\212\231\206\276\203!\375\275\302\062\256=\177\265g>\347\016\373>\261\233\217\276'\242\264>\236S\221\277\367$\023?", 
        uint8 = 0x7ffff67ea174 "\245\340T>\231\021+>\303\352\261<\n\245K>5\331x>\027`l=z\264\027\275є/\277\222PN\276ĭ\004\277\231\222\352>\335l?>\227\275A\276\305\367\346>\024\341žd\217\216\276\233\337\313>\265\004\021\276\215\vY>e\327S\276w\262Y\276\006C\003>(\v\222\275\060;Ⱦ\233\365\254\276\212\231\206\276\203!\375\275\302\062\256=\177\265g>\347\016\373>\261\233\217\276'\242\264>\236S\221\277\367$\023?", 
        b = 0x7ffff67ea174, 
        i16 = 0x7ffff67ea174, 
        c64 = 0x7ffff67ea174, 
        c128 = 0x7ffff67ea174, 
        int8 = 0x7ffff67ea174 "\245\340T>\231\021+>\303\352\261<\n\245K>5\331x>\027`l=z\264\027\275є/\277\222PN\276ĭ\004\277\231\222\352>\335l?>\227\275A\276\305\367\346>\024\341žd\217\216\276\233\337\313>\265\004\021\276\215\vY>e\327S\276w\262Y\276\006C\003>(\v\222\275\060;Ⱦ\233\365\254\276\212\231\206\276\203!\375\275\302\062\256=\177\265g>\347\016\373>\261\233\217\276'\242\264>\236S\221\277\367$\023?", 
        data = 0x7ffff67ea174
      }, 
      dims = 0xe8d4f0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 18432, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce5524 "MobilenetV1/Conv2d_11_depthwise/depthwise_weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff62ecbbc, 
        u32 = 0x7ffff62ecbbc, 
        i64 = 0x7ffff62ecbbc, 
        u64 = 0x7ffff62ecbbc, 
        f = 0x7ffff62ecbbc, 
        f16 = 0x7ffff62ecbbc, 
        f64 = 0x7ffff62ecbbc, 
        raw = 0x7ffff62ecbbc "\334\351@<\204\064\231=Vy\326<g\r\264\274\260\315==\361Ճ\275RP\020\275\355\017\065\272\016\277\325=\260\nĽ\345\235%\275\324\374\024=\240\263\325;r\020b=y4", 
        raw_const = 0x7ffff62ecbbc "\334\351@<\204\064\231=Vy\326<g\r\264\274\260\315==\361Ճ\275RP\020\275\355\017\065\272\016\277\325=\260\nĽ\345\235%\275\324\374\024=\240\263\325;r\020b=y4", 
        uint8 = 0x7ffff62ecbbc "\334\351@<\204\064\231=Vy\326<g\r\264\274\260\315==\361Ճ\275RP\020\275\355\017\065\272\016\277\325=\260\nĽ\345\235%\275\324\374\024=\240\263\325;r\020b=y4", 
        b = 0x7ffff62ecbbc, 
        i16 = 0x7ffff62ecbbc, 
        c64 = 0x7ffff62ecbbc, 
        c128 = 0x7ffff62ecbbc, 
        int8 = 0x7ffff62ecbbc "\334\351@<\204\064\231=Vy\326<g\r\264\274\260\315==\361Ճ\275RP\020\275\355\017\065\272\016\277\325=\260\nĽ\345\235%\275\324\374\024=\240\263\325;r\020b=y4", 
        data = 0x7ffff62ecbbc
      }, 
      dims = 0xe8d510, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 1048576, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce4938 "MobilenetV1/Conv2d_11_pointwise/weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff659d604, 
        u32 = 0x7ffff659d604, 
        i64 = 0x7ffff659d604, 
        u64 = 0x7ffff659d604, 
        f = 0x7ffff659d604, 
        f16 = 0x7ffff659d604, 
        f64 = 0x7ffff659d604, 
        raw = 0x7ffff659d604 "\022\303\066\276\260\250t>|\033\352>E\362\070>˄\230>\n\330\307>\025\377\235>\277(N>\347\367\267>n\032\032\277/VQ\276\357 \027\276\320X\262>\217\275}>\267=\034\276>\200", 
        raw_const = 0x7ffff659d604 "\022\303\066\276\260\250t>|\033\352>E\362\070>˄\230>\n\330\307>\025\377\235>\277(N>\347\367\267>n\032\032\277/VQ\276\357 \027\276\320X\262>\217\275}>\267=\034\276>\200", 
        uint8 = 0x7ffff659d604 "\022\303\066\276\260\250t>|\033\352>E\362\070>˄\230>\n\330\307>\025\377\235>\277(N>\347\367\267>n\032\032\277/VQ\276\357 \027\276\320X\262>\217\275}>\267=\034\276>\200", 
        b = 0x7ffff659d604, 
        i16 = 0x7ffff659d604, 
        c64 = 0x7ffff659d604, 
        c128 = 0x7ffff659d604, 
        int8 = 0x7ffff659d604 "\022\303\066\276\260\250t>|\033\352>E\362\070>˄\230>\n\330\307>\025\377\235>\277(N>\347\367\267>n\032\032\277/VQ\276\357 \027\276\320X\262>\217\275}>\267=\034\276>\200", 
        data = 0x7ffff659d604
      }, 
      dims = 0xe8d530, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 18432, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce5174 "MobilenetV1/Conv2d_12_depthwise/depthwise_weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff60e8310, 
        u32 = 0x7ffff60e8310, 
        i64 = 0x7ffff60e8310, 
        u64 = 0x7ffff60e8310, 
        f = 0x7ffff60e8310, 
        f16 = 0x7ffff60e8310, 
        f64 = 0x7ffff60e8310, 
        raw = 0x7ffff60e8310 "\240\215\203\275\217C\360<\273\361\205=S{]\275\031\371\002=\335\061\267<\305_r;\355\267\200\274\226\332\341\274葝<\264\257*\273\205pz\275tfż \316\215\273\373KF\275\027C", 
        raw_const = 0x7ffff60e8310 "\240\215\203\275\217C\360<\273\361\205=S{]\275\031\371\002=\335\061\267<\305_r;\355\267\200\274\226\332\341\274葝<\264\257*\273\205pz\275tfż \316\215\273\373KF\275\027C", 
        uint8 = 0x7ffff60e8310 "\240\215\203\275\217C\360<\273\361\205=S{]\275\031\371\002=\335\061\267<\305_r;\355\267\200\274\226\332\341\274葝<\264\257*\273\205pz\275tfż \316\215\273\373KF\275\027C", 
        b = 0x7ffff60e8310, 
        i16 = 0x7ffff60e8310, 
        c64 = 0x7ffff60e8310, 
        c128 = 0x7ffff60e8310, 
        int8 = 0x7ffff60e8310 "\240\215\203\275\217C\360<\273\361\205=S{]\275\031\371\002=\335\061\267<\305_r;\355\267\200\274\226\332\341\274葝<\264\257*\273\205pz\275tfż \316\215\273\373KF\275\027C", 
        data = 0x7ffff60e8310
      }, 
      dims = 0xe8d550, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 2097152, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce4754 "MobilenetV1/Conv2d_12_pointwise/weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff64f9214, 
        u32 = 0x7ffff64f9214, 
        i64 = 0x7ffff64f9214, 
        u64 = 0x7ffff64f9214, 
        f = 0x7ffff64f9214, 
        f16 = 0x7ffff64f9214, 
        f64 = 0x7ffff64f9214, 
        raw = 0x7ffff64f9214 "\034\276\207?LJ\275?<\334*?\221\355:?2\222\200?\001Ы?G.\203?,\020\063?NPn\277\243 \022\277;\241\361\276+kC?\326P\214?\320\377\070?\203֯>\361%\027\277\364\002\217?d\002\211?k\337\027\277P\224\003@e\237\315?\230\332\070?\312\305;?\211\333M\277}\200\031@\247\066)\277`\266\334?\f\210\275?\025sl?5\277\006\277I\023e\300\201\004s\276\026]\372\276\276!\237?\371\225\004\277\336 \204?:\006v?f\245\211?\337sA\301\203\205e?P\177\004\277\023", 
        raw_const = 0x7ffff64f9214 "\034\276\207?LJ\275?<\334*?\221\355:?2\222\200?\001Ы?G.\203?,\020\063?NPn\277\243 \022\277;\241\361\276+kC?\326P\214?\320\377\070?\203֯>\361%\027\277\364\002\217?d\002\211?k\337\027\277P\224\003@e\237\315?\230\332\070?\312\305;?\211\333M\277}\200\031@\247\066)\277`\266\334?\f\210\275?\025sl?5\277\006\277I\023e\300\201\004s\276\026]\372\276\276!\237?\371\225\004\277\336 \204?:\006v?f\245\211?\337sA\301\203\205e?P\177\004\277\023", 
        uint8 = 0x7ffff64f9214 "\034\276\207?LJ\275?<\334*?\221\355:?2\222\200?\001Ы?G.\203?,\020\063?NPn\277\243 \022\277;\241\361\276+kC?\326P\214?\320\377\070?\203֯>\361%\027\277\364\002\217?d\002\211?k\337\027\277P\224\003@e\237\315?\230\332\070?\312\305;?\211\333M\277}\200\031@\247\066)\277`\266\334?\f\210\275?\025sl?5\277\006\277I\023e\300\201\004s\276\026]\372\276\276!\237?\371\225\004\277\336 \204?:\006v?f\245\211?\337sA\301\203\205e?P\177\004\277\023", 
        b = 0x7ffff64f9214, 
        i16 = 0x7ffff64f9214, 
        c64 = 0x7ffff64f9214, 
        c128 = 0x7ffff64f9214, 
        int8 = 0x7ffff64f9214 "\034\276\207?LJ\275?<\334*?\221\355:?2\222\200?\001Ы?G.\203?,\020\063?NPn\277\243 \022\277;\241\361\276+kC?\326P\214?\320\377\070?\203֯>\361%\027\277\364\002\217?d\002\211?k\337\027\277P\224\003@e\237\315?\230\332\070?\312\305;?\211\333M\277}\200\031@\247\066)\277`\266\334?\f\210\275?\025sl?5\277\006\277I\023e\300\201\004s\276\026]\372\276\276!\237?\371\225\004\277\336 \204?:\006v?f\245\211?\337sA\301\203\205e?P\177\004\277\023", 
        data = 0x7ffff64f9214
      }, 
      dims = 0xe8d570, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 36864, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce4cf0 "MobilenetV1/Conv2d_13_depthwise/depthwise_weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff5ce82ec, 
        u32 = 0x7ffff5ce82ec, 
        i64 = 0x7ffff5ce82ec, 
        u64 = 0x7ffff5ce82ec, 
        f = 0x7ffff5ce82ec, 
        f16 = 0x7ffff5ce82ec, 
        f64 = 0x7ffff5ce82ec, 
        raw = 0x7ffff5ce82ec "V\200\224>\271\231-\276\214\246\302>\347F\206\276L #\277\027\060\061\277g\247\036=h_,>\310\301\225\274\031S\206\276\004\017\222\276\351GW\276\v\256V\276\324J\233\276/\375->;۲=\020\343(>T1\272\275oL\256\275\352u-\277\300\200\374=.\351B=\336\352A\276\061\306@>G\rF\276\004\373$\276z\005\071\277o\235(=\347{\016\277\066\230B\276\067\274\227>\215\271]>\aZþ\tƢ\274\240}\025\276\b\341\004\274l\233\002?\360_r>r\375\065>\023\004\214<\272\271", 
        raw_const = 0x7ffff5ce82ec "V\200\224>\271\231-\276\214\246\302>\347F\206\276L #\277\027\060\061\277g\247\036=h_,>\310\301\225\274\031S\206\276\004\017\222\276\351GW\276\v\256V\276\324J\233\276/\375->;۲=\020\343(>T1\272\275oL\256\275\352u-\277\300\200\374=.\351B=\336\352A\276\061\306@>G\rF\276\004\373$\276z\005\071\277o\235(=\347{\016\277\066\230B\276\067\274\227>\215\271]>\aZþ\tƢ\274\240}\025\276\b\341\004\274l\233\002?\360_r>r\375\065>\023\004\214<\272\271", 
        uint8 = 0x7ffff5ce82ec "V\200\224>\271\231-\276\214\246\302>\347F\206\276L #\277\027\060\061\277g\247\036=h_,>\310\301\225\274\031S\206\276\004\017\222\276\351GW\276\v\256V\276\324J\233\276/\375->;۲=\020\343(>T1\272\275oL\256\275\352u-\277\300\200\374=.\351B=\336\352A\276\061\306@>G\rF\276\004\373$\276z\005\071\277o\235(=\347{\016\277\066\230B\276\067\274\227>\215\271]>\aZþ\tƢ\274\240}\025\276\b\341\004\274l\233\002?\360_r>r\375\065>\023\004\214<\272\271", 
        b = 0x7ffff5ce82ec, 
        i16 = 0x7ffff5ce82ec, 
        c64 = 0x7ffff5ce82ec, 
        c128 = 0x7ffff5ce82ec, 
        int8 = 0x7ffff5ce82ec "V\200\224>\271\231-\276\214\246\302>\347F\206\276L #\277\027\060\061\277g\247\036=h_,>\310\301\225\274\031S\206\276\004\017\222\276\351GW\276\v\256V\276\324J\233\276/\375->;۲=\020\343(>T1\272\275oL\256\275\352u-\277\300\200\374=.\351B=\336\352A\276\061\306@>G\rF\276\004\373$\276z\005\071\277o\235(=\347{\016\277\066\230B\276\067\274\227>\215\271]>\aZþ\tƢ\274\240}\025\276\b\341\004\274l\233\002?\360_r>r\375\065>\023\004\214<\272\271", 
        data = 0x7ffff5ce82ec
      }, 
      dims = 0xe8d590, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 4194304, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce44a4 "MobilenetV1/Conv2d_13_pointwise/weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff651d168, 
        u32 = 0x7ffff651d168, 
        i64 = 0x7ffff651d168, 
        u64 = 0x7ffff651d168, 
        f = 0x7ffff651d168, 
        f16 = 0x7ffff651d168, 
        f64 = 0x7ffff651d168, 
        raw = 0x7ffff651d168 "x\265\234\277F\002O?\364\066\023\276\035V\324\300\021\035\273\277\017L\354?IyM\276\354\354B<\225O\v@\n\017\036B\344\362\250@\017\361\207\275\022\070i;0\231\025?\030\370_>\204\350\f\275\352\063\003\275l\037\027=B+\263<\277_\002?`\025\366\300;%\026\277\tG\016Bj\374\016<С\216\301yg\032\276\226[\234=^\006S@\204\202\377\274\266\331&\276\221\026\b\301[=T>f9]\277\023ê?\257?\025>r\242\314\300\225D\026?\375\236\273\277\341\377\373\275\301\261ƽ}\033$@\177x\003BQ&!\300[\310\035>>N\201\274i|v\277\316\031\060\276k\261;\300\235\235\214=PɁ\275"..., 
        raw_const = 0x7ffff651d168 "x\265\234\277F\002O?\364\066\023\276\035V\324\300\021\035\273\277\017L\354?IyM\276\354\354B<\225O\v@\n\017\036B\344\362\250@\017\361\207\275\022\070i;0\231\025?\030\370_>\204\350\f\275\352\063\003\275l\037\027=B+\263<\277_\002?`\025\366\300;%\026\277\tG\016Bj\374\016<С\216\301yg\032\276\226[\234=^\006S@\204\202\377\274\266\331&\276\221\026\b\301[=T>f9]\277\023ê?\257?\025>r\242\314\300\225D\026?\375\236\273\277\341\377\373\275\301\261ƽ}\033$@\177x\003BQ&!\300[\310\035>>N\201\274i|v\277\316\031\060\276k\261;\300\235\235\214=PɁ\275"..., 
        uint8 = 0x7ffff651d168 "x\265\234\277F\002O?\364\066\023\276\035V\324\300\021\035\273\277\017L\354?IyM\276\354\354B<\225O\v@\n\017\036B\344\362\250@\017\361\207\275\022\070i;0\231\025?\030\370_>\204\350\f\275\352\063\003\275l\037\027=B+\263<\277_\002?`\025\366\300;%\026\277\tG\016Bj\374\016<С\216\301yg\032\276\226[\234=^\006S@\204\202\377\274\266\331&\276\221\026\b\301[=T>f9]\277\023ê?\257?\025>r\242\314\300\225D\026?\375\236\273\277\341\377\373\275\301\261ƽ}\033$@\177x\003BQ&!\300[\310\035>>N\201\274i|v\277\316\031\060\276k\261;\300\235\235\214=PɁ\275"..., 
        b = 0x7ffff651d168, 
        i16 = 0x7ffff651d168, 
        c64 = 0x7ffff651d168, 
        c128 = 0x7ffff651d168, 
        int8 = 0x7ffff651d168 "x\265\234\277F\002O?\364\066\023\276\035V\324\300\021\035\273\277\017L\354?IyM\276\354\354B<\225O\v@\n\017\036B\344\362\250@\017\361\207\275\022\070i;0\231\025?\030\370_>\204\350\f\275\352\063\003\275l\037\027=B+\263<\277_\002?`\025\366\300;%\026\277\tG\016Bj\374\016<С\216\301yg\032\276\226[\234=^\006S@\204\202\377\274\266\331&\276\221\026\b\301[=T>f9]\277\023ê?\257?\025>r\242\314\300\225D\026?\375\236\273\277\341\377\373\275\301\261ƽ}\033$@\177x\003BQ&!\300[\310\035>>N\201\274i|v\277\316\031\060\276k\261;\300\235\235\214=PɁ\275"..., 
        data = 0x7ffff651d168
      }, 
      dims = 0xe8d5b0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 1152, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce5054 "MobilenetV1/Conv2d_1_depthwise/depthwise_weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff66e8158, 
        u32 = 0x7ffff66e8158, 
        i64 = 0x7ffff66e8158, 
        u64 = 0x7ffff66e8158, 
        f = 0x7ffff66e8158, 
        f16 = 0x7ffff66e8158, 
        f64 = 0x7ffff66e8158, 
        raw = 0x7ffff66e8158 "\211\255\331\066֨\272\274\351U\220=6\246\233\066\274\303\022\275\321\361b=\251\070\026\274\200W\300=\027n\036\070P\220\r7C\001\035\266J,7\275\363\202z=\276\342p\275B\236\001;UD\217\276b\220v\274O$\351;\370Տ<\315\030\\;\202٠5W\003!\276\\\225 8\247\220\067=\345\301A\270\276+\031\274\347\023\233;\311\070\062\070\356\210Q=u\224㽚\226\220\070h\343(>\364ݦ7\330\064\360;\355NŽ\317fJ6QC\236;\030\033\214?ϯ\212\274=uA=\005\260\370\267\325\313\t88\251\005\270\201&x\275\354k\202\275\v\367\361\275\224P\027\271ؑh=.\226\177\274\022\245ν"..., 
        raw_const = 0x7ffff66e8158 "\211\255\331\066֨\272\274\351U\220=6\246\233\066\274\303\022\275\321\361b=\251\070\026\274\200W\300=\027n\036\070P\220\r7C\001\035\266J,7\275\363\202z=\276\342p\275B\236\001;UD\217\276b\220v\274O$\351;\370Տ<\315\030\\;\202٠5W\003!\276\\\225 8\247\220\067=\345\301A\270\276+\031\274\347\023\233;\311\070\062\070\356\210Q=u\224㽚\226\220\070h\343(>\364ݦ7\330\064\360;\355NŽ\317fJ6QC\236;\030\033\214?ϯ\212\274=uA=\005\260\370\267\325\313\t88\251\005\270\201&x\275\354k\202\275\v\367\361\275\224P\027\271ؑh=.\226\177\274\022\245ν"..., 
        uint8 = 0x7ffff66e8158 "\211\255\331\066֨\272\274\351U\220=6\246\233\066\274\303\022\275\321\361b=\251\070\026\274\200W\300=\027n\036\070P\220\r7C\001\035\266J,7\275\363\202z=\276\342p\275B\236\001;UD\217\276b\220v\274O$\351;\370Տ<\315\030\\;\202٠5W\003!\276\\\225 8\247\220\067=\345\301A\270\276+\031\274\347\023\233;\311\070\062\070\356\210Q=u\224㽚\226\220\070h\343(>\364ݦ7\330\064\360;\355NŽ\317fJ6QC\236;\030\033\214?ϯ\212\274=uA=\005\260\370\267\325\313\t88\251\005\270\201&x\275\354k\202\275\v\367\361\275\224P\027\271ؑh=.\226\177\274\022\245ν"..., 
        b = 0x7ffff66e8158, 
        i16 = 0x7ffff66e8158, 
        c64 = 0x7ffff66e8158, 
        c128 = 0x7ffff66e8158, 
        int8 = 0x7ffff66e8158 "\211\255\331\066֨\272\274\351U\220=6\246\233\066\274\303\022\275\321\361b=\251\070\026\274\200W\300=\027n\036\070P\220\r7C\001\035\266J,7\275\363\202z=\276\342p\275B\236\001;UD\217\276b\220v\274O$\351;\370Տ<\315\030\\;\202٠5W\003!\276\\\225 8\247\220\067=\345\301A\270\276+\031\274\347\023\233;\311\070\062\070\356\210Q=u\224㽚\226\220\070h\343(>\364ݦ7\330\064\360;\355NŽ\317fJ6QC\236;\030\033\214?ϯ\212\274=uA=\005\260\370\267\325\313\t88\251\005\270\201&x\275\354k\202\275\v\367\361\275\224P\027\271ؑh=.\226\177\274\022\245ν"..., 
        data = 0x7ffff66e8158
      }, 
      dims = 0xe8d5d0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 8192, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce5410 "MobilenetV1/Conv2d_1_pointwise/weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6514644, 
        u32 = 0x7ffff6514644, 
        i64 = 0x7ffff6514644, 
        u64 = 0x7ffff6514644, 
        f = 0x7ffff6514644, 
        f16 = 0x7ffff6514644, 
        f64 = 0x7ffff6514644, 
        raw = 0x7ffff6514644 "\312\030\241\276\232\357;>^۱>,\332k\277\225\022h\276\251\031\002\276nV\275>A\373\227=.=*\277\004ѓ\274[x\371\276\325KE\277>\342<>\271\214\255\275<\332\351\275ԸX>\234\372\005?\231\340\224>\335\023\233>`\322q>F\230\231\276\300\254\302?\265R\331=\244\330r\275\340|\363\277o\243\207\277Nr\202\276\300\313\061@Z\201}\276\223\371-\275\305㗾\255Q\323=\317\306.=\277\235\032\275\240\354/\301ϔ\377>U\244\226>랛A\001!\366>'\350f>\250\236Q\276\020\067H\276\037\221\271\275oO\034\300\rI\235A\016\253\021?\b$]> pZ\300\213\v\214\276\213\255\225>"..., 
        raw_const = 0x7ffff6514644 "\312\030\241\276\232\357;>^۱>,\332k\277\225\022h\276\251\031\002\276nV\275>A\373\227=.=*\277\004ѓ\274[x\371\276\325KE\277>\342<>\271\214\255\275<\332\351\275ԸX>\234\372\005?\231\340\224>\335\023\233>`\322q>F\230\231\276\300\254\302?\265R\331=\244\330r\275\340|\363\277o\243\207\277Nr\202\276\300\313\061@Z\201}\276\223\371-\275\305㗾\255Q\323=\317\306.=\277\235\032\275\240\354/\301ϔ\377>U\244\226>랛A\001!\366>'\350f>\250\236Q\276\020\067H\276\037\221\271\275oO\034\300\rI\235A\016\253\021?\b$]> pZ\300\213\v\214\276\213\255\225>"..., 
        uint8 = 0x7ffff6514644 "\312\030\241\276\232\357;>^۱>,\332k\277\225\022h\276\251\031\002\276nV\275>A\373\227=.=*\277\004ѓ\274[x\371\276\325KE\277>\342<>\271\214\255\275<\332\351\275ԸX>\234\372\005?\231\340\224>\335\023\233>`\322q>F\230\231\276\300\254\302?\265R\331=\244\330r\275\340|\363\277o\243\207\277Nr\202\276\300\313\061@Z\201}\276\223\371-\275\305㗾\255Q\323=\317\306.=\277\235\032\275\240\354/\301ϔ\377>U\244\226>랛A\001!\366>'\350f>\250\236Q\276\020\067H\276\037\221\271\275oO\034\300\rI\235A\016\253\021?\b$]> pZ\300\213\v\214\276\213\255\225>"..., 
        b = 0x7ffff6514644, 
        i16 = 0x7ffff6514644, 
        c64 = 0x7ffff6514644, 
        c128 = 0x7ffff6514644, 
        int8 = 0x7ffff6514644 "\312\030\241\276\232\357;>^۱>,\332k\277\225\022h\276\251\031\002\276nV\275>A\373\227=.=*\277\004ѓ\274[x\371\276\325KE\277>\342<>\271\214\255\275<\332\351\275ԸX>\234\372\005?\231\340\224>\335\023\233>`\322q>F\230\231\276\300\254\302?\265R\331=\244\330r\275\340|\363\277o\243\207\277Nr\202\276\300\313\061@Z\201}\276\223\371-\275\305㗾\255Q\323=\317\306.=\277\235\032\275\240\354/\301ϔ\377>U\244\226>랛A\001!\366>'\350f>\250\236Q\276\020\067H\276\037\221\271\275oO\034\300\rI\235A\016\253\021?\b$]> pZ\300\213\v\214\276\213\255\225>"..., 
        data = 0x7ffff6514644
      }, 
      dims = 0xe8d5f0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 2304, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce4f3c "MobilenetV1/Conv2d_2_depthwise/depthwise_weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff651515c, 
        u32 = 0x7ffff651515c, 
        i64 = 0x7ffff651515c, 
        u64 = 0x7ffff651515c, 
        f = 0x7ffff651515c, 
        f16 = 0x7ffff651515c, 
        f64 = 0x7ffff651515c, 
        raw = 0x7ffff651515c "\236\211%=\017\222\207\274\273\343.\276\067\327\350;\325>\f\275\016\205\206\273\376Q\033\274-\264\206>\\\374\202\275w\021\255\274\017\035\252\273&\372\306;,i轨\345f\275\266V\240\273\230\213\247\274U\305ؼA\017H<8vл\240\266\317<C\033\262\275\335\347\027=\315A>\274\310\062\364\275\222\312M\274\210\326\341<\272\037V\275ya`\274\002\t\247\275\314\347&<\375\353\316=]\256\336\274\023\362\231>\367\344\r\275\200x\262\066\253\355%<\241\343j>\332=\352\264t\223y\275c\025\t>z\206m\276\302Ɉ5\245\247_\274_O\213\274\363\070\001\070\062\352\065\275\355\256\f<\a\376@\275\232(!\276\027\213\226="..., 
        raw_const = 0x7ffff651515c "\236\211%=\017\222\207\274\273\343.\276\067\327\350;\325>\f\275\016\205\206\273\376Q\033\274-\264\206>\\\374\202\275w\021\255\274\017\035\252\273&\372\306;,i轨\345f\275\266V\240\273\230\213\247\274U\305ؼA\017H<8vл\240\266\317<C\033\262\275\335\347\027=\315A>\274\310\062\364\275\222\312M\274\210\326\341<\272\037V\275ya`\274\002\t\247\275\314\347&<\375\353\316=]\256\336\274\023\362\231>\367\344\r\275\200x\262\066\253\355%<\241\343j>\332=\352\264t\223y\275c\025\t>z\206m\276\302Ɉ5\245\247_\274_O\213\274\363\070\001\070\062\352\065\275\355\256\f<\a\376@\275\232(!\276\027\213\226="..., 
        uint8 = 0x7ffff651515c "\236\211%=\017\222\207\274\273\343.\276\067\327\350;\325>\f\275\016\205\206\273\376Q\033\274-\264\206>\\\374\202\275w\021\255\274\017\035\252\273&\372\306;,i轨\345f\275\266V\240\273\230\213\247\274U\305ؼA\017H<8vл\240\266\317<C\033\262\275\335\347\027=\315A>\274\310\062\364\275\222\312M\274\210\326\341<\272\037V\275ya`\274\002\t\247\275\314\347&<\375\353\316=]\256\336\274\023\362\231>\367\344\r\275\200x\262\066\253\355%<\241\343j>\332=\352\264t\223y\275c\025\t>z\206m\276\302Ɉ5\245\247_\274_O\213\274\363\070\001\070\062\352\065\275\355\256\f<\a\376@\275\232(!\276\027\213\226="..., 
        b = 0x7ffff651515c, 
        i16 = 0x7ffff651515c, 
        c64 = 0x7ffff651515c, 
        c128 = 0x7ffff651515c, 
        int8 = 0x7ffff651515c "\236\211%=\017\222\207\274\273\343.\276\067\327\350;\325>\f\275\016\205\206\273\376Q\033\274-\264\206>\\\374\202\275w\021\255\274\017\035\252\273&\372\306;,i轨\345f\275\266V\240\273\230\213\247\274U\305ؼA\017H<8vл\240\266\317<C\033\262\275\335\347\027=\315A>\274\310\062\364\275\222\312M\274\210\326\341<\272\037V\275ya`\274\002\t\247\275\314\347&<\375\353\316=]\256\336\274\023\362\231>\367\344\r\275\200x\262\066\253\355%<\241\343j>\332=\352\264t\223y\275c\025\t>z\206m\276\302Ɉ5\245\247_\274_O\213\274\363\070\001\070\062\352\065\275\355\256\f<\a\376@\275\232(!\276\027\213\226="..., 
        data = 0x7ffff651515c
      }, 
      dims = 0xe8d610, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 32768, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce4ffc "MobilenetV1/Conv2d_2_pointwise/weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff64f37fc, 
        u32 = 0x7ffff64f37fc, 
        i64 = 0x7ffff64f37fc, 
        u64 = 0x7ffff64f37fc, 
        f = 0x7ffff64f37fc, 
        f16 = 0x7ffff64f37fc, 
        f64 = 0x7ffff64f37fc, 
        raw = 0x7ffff64f37fc "\026Ϭ\275\341곽\036\063\376=\026'\"\273;\373\253<fj\227\276\325\066\361>\r\247^\276\244rS=8HO\275\322Kk>\356C\256\275\rkv\276\340tW\275\001\203\343\275Ɲ\v\276\264\fT>gS\r\277\367ۧ>\f\025;>\263\371\071\276H%\232\274\204NT=s\320E\274+\321\063?9\362\201?\031'\277>\020\373\034>d\231\234=\242\276\274\276\225~Ľ\350O_>l\337\b\276\213\236-=\275\067a>\"\005s=#hQ\276,\021ͽИ\305?\035\220+?7\243\005@@\245 >\274\350\001\275\277N\360<\375נ\277D\276W>\213UP\276\232\374-\276Q\371\346;\354\034\005\277"..., 
        raw_const = 0x7ffff64f37fc "\026Ϭ\275\341곽\036\063\376=\026'\"\273;\373\253<fj\227\276\325\066\361>\r\247^\276\244rS=8HO\275\322Kk>\356C\256\275\rkv\276\340tW\275\001\203\343\275Ɲ\v\276\264\fT>gS\r\277\367ۧ>\f\025;>\263\371\071\276H%\232\274\204NT=s\320E\274+\321\063?9\362\201?\031'\277>\020\373\034>d\231\234=\242\276\274\276\225~Ľ\350O_>l\337\b\276\213\236-=\275\067a>\"\005s=#hQ\276,\021ͽИ\305?\035\220+?7\243\005@@\245 >\274\350\001\275\277N\360<\375נ\277D\276W>\213UP\276\232\374-\276Q\371\346;\354\034\005\277"..., 
        uint8 = 0x7ffff64f37fc "\026Ϭ\275\341곽\036\063\376=\026'\"\273;\373\253<fj\227\276\325\066\361>\r\247^\276\244rS=8HO\275\322Kk>\356C\256\275\rkv\276\340tW\275\001\203\343\275Ɲ\v\276\264\fT>gS\r\277\367ۧ>\f\025;>\263\371\071\276H%\232\274\204NT=s\320E\274+\321\063?9\362\201?\031'\277>\020\373\034>d\231\234=\242\276\274\276\225~Ľ\350O_>l\337\b\276\213\236-=\275\067a>\"\005s=#hQ\276,\021ͽИ\305?\035\220+?7\243\005@@\245 >\274\350\001\275\277N\360<\375נ\277D\276W>\213UP\276\232\374-\276Q\371\346;\354\034\005\277"..., 
        b = 0x7ffff64f37fc, 
        i16 = 0x7ffff64f37fc, 
        c64 = 0x7ffff64f37fc, 
        c128 = 0x7ffff64f37fc, 
        int8 = 0x7ffff64f37fc "\026Ϭ\275\341곽\036\063\376=\026'\"\273;\373\253<fj\227\276\325\066\361>\r\247^\276\244rS=8HO\275\322Kk>\356C\256\275\rkv\276\340tW\275\001\203\343\275Ɲ\v\276\264\fT>gS\r\277\367ۧ>\f\025;>\263\371\071\276H%\232\274\204NT=s\320E\274+\321\063?9\362\201?\031'\277>\020\373\034>d\231\234=\242\276\274\276\225~Ľ\350O_>l\337\b\276\213\236-=\275\067a>\"\005s=#hQ\276,\021ͽИ\305?\035\220+?7\243\005@@\245 >\274\350\001\275\277N\360<\375נ\277D\276W>\213UP\276\232\374-\276Q\371\346;\354\034\005\277"..., 
        data = 0x7ffff64f37fc
      }, 
      dims = 0xe8d630, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 4608, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce4c28 "MobilenetV1/Conv2d_3_depthwise/depthwise_weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6502228, 
        u32 = 0x7ffff6502228, 
        i64 = 0x7ffff6502228, 
        u64 = 0x7ffff6502228, 
        f = 0x7ffff6502228, 
        f16 = 0x7ffff6502228, 
        f64 = 0x7ffff6502228, 
        raw = 0x7ffff6502228 "\033ꕽ\364q\a>ӹ\251\274\273A\301<\207\063\220\275N\375\226=\222u\212\276\261\315\323=\030\264\320=\344[\001>\263!x\275C?\215=\261\260v\274^\306\032=\025gK>(\244\250\275=\370$\275\341\060q<t3\202\276\263]뽙3\263\274\342\373\225<\354\256\025\276\216\231\207\274ic?\275\363\335j;\251l\255=\270\363\071\271~\262\030=\177\213\366=\236\323R=B:\035\275\345\035\254\274\247\250\001\276H\277s=\304q)\275\276\035{\275Wh\341\272:\267@\274#R.;!\223\065\273", 
        raw_const = 0x7ffff6502228 "\033ꕽ\364q\a>ӹ\251\274\273A\301<\207\063\220\275N\375\226=\222u\212\276\261\315\323=\030\264\320=\344[\001>\263!x\275C?\215=\261\260v\274^\306\032=\025gK>(\244\250\275=\370$\275\341\060q<t3\202\276\263]뽙3\263\274\342\373\225<\354\256\025\276\216\231\207\274ic?\275\363\335j;\251l\255=\270\363\071\271~\262\030=\177\213\366=\236\323R=B:\035\275\345\035\254\274\247\250\001\276H\277s=\304q)\275\276\035{\275Wh\341\272:\267@\274#R.;!\223\065\273", 
        uint8 = 0x7ffff6502228 "\033ꕽ\364q\a>ӹ\251\274\273A\301<\207\063\220\275N\375\226=\222u\212\276\261\315\323=\030\264\320=\344[\001>\263!x\275C?\215=\261\260v\274^\306\032=\025gK>(\244\250\275=\370$\275\341\060q<t3\202\276\263]뽙3\263\274\342\373\225<\354\256\025\276\216\231\207\274ic?\275\363\335j;\251l\255=\270\363\071\271~\262\030=\177\213\366=\236\323R=B:\035\275\345\035\254\274\247\250\001\276H\277s=\304q)\275\276\035{\275Wh\341\272:\267@\274#R.;!\223\065\273", 
        b = 0x7ffff6502228, 
        i16 = 0x7ffff6502228, 
        c64 = 0x7ffff6502228, 
        c128 = 0x7ffff6502228, 
        int8 = 0x7ffff6502228 "\033ꕽ\364q\a>ӹ\251\274\273A\301<\207\063\220\275N\375\226=\222u\212\276\261\315\323=\030\264\320=\344[\001>\263!x\275C?\215=\261\260v\274^\306\032=\025gK>(\244\250\275=\370$\275\341\060q<t3\202\276\263]뽙3\263\274\342\373\225<\354\256\025\276\216\231\207\274ic?\275\363\335j;\251l\255=\270\363\071\271~\262\030=\177\213\366=\236\323R=B:\035\275\345\035\254\274\247\250\001\276H\277s=\304q)\275\276\035{\275Wh\341\272:\267@\274#R.;!\223\065\273", 
        data = 0x7ffff6502228
      }, 
      dims = 0xe8d650, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 65536, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce4e1c "MobilenetV1/Conv2d_3_pointwise/weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff65a1e10, 
        u32 = 0x7ffff65a1e10, 
        i64 = 0x7ffff65a1e10, 
        u64 = 0x7ffff65a1e10, 
        f = 0x7ffff65a1e10, 
        f16 = 0x7ffff65a1e10, 
        f64 = 0x7ffff65a1e10, 
        raw = 0x7ffff65a1e10 "\357ٲ>\261\305S>p\b0\276\331烾\232\341\060\276x;\037>\"r\241<\257\266z>\036!\232\276\033@t>\261\212\235>N)\226\276hcɾ\357\273>>#\277)\276\234\343\200>\327ߢ\276\277\251\070\276\362\a\221>\356\006i\276\374&,>\017\026\301\276\061C?\276F\316l>h\205\200\276\321\367\224>;>\023>\216\035\327=#qھ\241\264Y>t섾C:\260>\022d\254\276\061\022P>$\234\332>\033\344\210>\201X\200>\004f\240\276\317\353#>\027%\215>8\213\065>l}\276\277\065\215\236\276\371g\223\277B\212iV?\223,\242\276\023(-\276\376t\235>\304*\341>"..., 
        raw_const = 0x7ffff65a1e10 "\357ٲ>\261\305S>p\b0\276\331烾\232\341\060\276x;\037>\"r\241<\257\266z>\036!\232\276\033@t>\261\212\235>N)\226\276hcɾ\357\273>>#\277)\276\234\343\200>\327ߢ\276\277\251\070\276\362\a\221>\356\006i\276\374&,>\017\026\301\276\061C?\276F\316l>h\205\200\276\321\367\224>;>\023>\216\035\327=#qھ\241\264Y>t섾C:\260>\022d\254\276\061\022P>$\234\332>\033\344\210>\201X\200>\004f\240\276\317\353#>\027%\215>8\213\065>l}\276\277\065\215\236\276\371g\223\277B\212iV?\223,\242\276\023(-\276\376t\235>\304*\341>"..., 
        uint8 = 0x7ffff65a1e10 "\357ٲ>\261\305S>p\b0\276\331烾\232\341\060\276x;\037>\"r\241<\257\266z>\036!\232\276\033@t>\261\212\235>N)\226\276hcɾ\357\273>>#\277)\276\234\343\200>\327ߢ\276\277\251\070\276\362\a\221>\356\006i\276\374&,>\017\026\301\276\061C?\276F\316l>h\205\200\276\321\367\224>;>\023>\216\035\327=#qھ\241\264Y>t섾C:\260>\022d\254\276\061\022P>$\234\332>\033\344\210>\201X\200>\004f\240\276\317\353#>\027%\215>8\213\065>l}\276\277\065\215\236\276\371g\223\277B\212iV?\223,\242\276\023(-\276\376t\235>\304*\341>"..., 
        b = 0x7ffff65a1e10, 
        i16 = 0x7ffff65a1e10, 
        c64 = 0x7ffff65a1e10, 
        c128 = 0x7ffff65a1e10, 
        int8 = 0x7ffff65a1e10 "\357ٲ>\261\305S>p\b0\276\331烾\232\341\060\276x;\037>\"r\241<\257\266z>\036!\232\276\033@t>\261\212\235>N)\226\276hcɾ\357\273>>#\277)\276\234\343\200>\327ߢ\276\277\251\070\276\362\a\221>\356\006i\276\374&,>\017\026\301\276\061C?\276F\316l>h\205\200\276\321\367\224>;>\023>\216\035\327=#qھ\241\264Y>t섾C:\260>\022d\254\276\061\022P>$\234\332>\033\344\210>\201X\200>\004f\240\276\317\353#>\027%\215>8\213\065>l}\276\277\065\215\236\276\371g\223\277B\212iV?\223,\242\276\023(-\276\376t\235>\304*\341>"..., 
        data = 0x7ffff65a1e10
      }, 
      dims = 0xe8d670, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 4608, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce51d8 "MobilenetV1/Conv2d_4_depthwise/depthwise_weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff5cc81cc, 
        u32 = 0x7ffff5cc81cc, 
        i64 = 0x7ffff5cc81cc, 
        u64 = 0x7ffff5cc81cc, 
        f = 0x7ffff5cc81cc, 
        f16 = 0x7ffff5cc81cc, 
        f64 = 0x7ffff5cc81cc, 
        raw = 0x7ffff5cc81cc "Y\373N\275\066\200\222\276\"\314s=\262\302\367\272YS\032\274\250\360~>\316a\003\275\234\217\254<\360\235\065<wֆ=\226\305Q;v\210\203=\274_Y\273\t\217\213<'\362\345\273(\314\061=\bn\357<\t6\037<C\331\006;_\355\202=\330\310&?\242WA<N\300\337\274'\005\272;$䟼D3\262\273p\335\335<^\372S;9\245\367;\035\207k=p4\234\275k\376û\352\211&<\177_\224\273a\004\025\274\371T<\276\276+y;d\343\237<1\370\b\274\355T3\274=\266\235;\364\302<\273\233~\035\274\332]\242\274k()\275\027\236U<\346\220H\274چ\300;o\020\245<^\232(\275"..., 
        raw_const = 0x7ffff5cc81cc "Y\373N\275\066\200\222\276\"\314s=\262\302\367\272YS\032\274\250\360~>\316a\003\275\234\217\254<\360\235\065<wֆ=\226\305Q;v\210\203=\274_Y\273\t\217\213<'\362\345\273(\314\061=\bn\357<\t6\037<C\331\006;_\355\202=\330\310&?\242WA<N\300\337\274'\005\272;$䟼D3\262\273p\335\335<^\372S;9\245\367;\035\207k=p4\234\275k\376û\352\211&<\177_\224\273a\004\025\274\371T<\276\276+y;d\343\237<1\370\b\274\355T3\274=\266\235;\364\302<\273\233~\035\274\332]\242\274k()\275\027\236U<\346\220H\274چ\300;o\020\245<^\232(\275"..., 
        uint8 = 0x7ffff5cc81cc "Y\373N\275\066\200\222\276\"\314s=\262\302\367\272YS\032\274\250\360~>\316a\003\275\234\217\254<\360\235\065<wֆ=\226\305Q;v\210\203=\274_Y\273\t\217\213<'\362\345\273(\314\061=\bn\357<\t6\037<C\331\006;_\355\202=\330\310&?\242WA<N\300\337\274'\005\272;$䟼D3\262\273p\335\335<^\372S;9\245\367;\035\207k=p4\234\275k\376û\352\211&<\177_\224\273a\004\025\274\371T<\276\276+y;d\343\237<1\370\b\274\355T3\274=\266\235;\364\302<\273\233~\035\274\332]\242\274k()\275\027\236U<\346\220H\274چ\300;o\020\245<^\232(\275"..., 
        b = 0x7ffff5cc81cc, 
        i16 = 0x7ffff5cc81cc, 
        c64 = 0x7ffff5cc81cc, 
        c128 = 0x7ffff5cc81cc, 
        int8 = 0x7ffff5cc81cc "Y\373N\275\066\200\222\276\"\314s=\262\302\367\272YS\032\274\250\360~>\316a\003\275\234\217\254<\360\235\065<wֆ=\226\305Q;v\210\203=\274_Y\273\t\217\213<'\362\345\273(\314\061=\bn\357<\t6\037<C\331\006;_\355\202=\330\310&?\242WA<N\300\337\274'\005\272;$䟼D3\262\273p\335\335<^\372S;9\245\367;\035\207k=p4\234\275k\376û\352\211&<\177_\224\273a\004\025\274\371T<\276\276+y;d\343\237<1\370\b\274\355T3\274=\266\235;\364\302<\273\233~\035\274\332]\242\274k()\275\027\236U<\346\220H\274چ\300;o\020\245<^\232(\275"..., 
        data = 0x7ffff5cc81cc
      }, 
      dims = 0xe8d690, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 131072, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce4328 "MobilenetV1/Conv2d_4_pointwise/weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff64f13f0, 
        u32 = 0x7ffff64f13f0, 
        i64 = 0x7ffff64f13f0, 
        u64 = 0x7ffff64f13f0, 
        f = 0x7ffff64f13f0, 
        f16 = 0x7ffff64f13f0, 
        f64 = 0x7ffff64f13f0, 
        raw = 0x7ffff64f13f0 "=\306\023\275a\215A?\325\344Q\276\206\360\221\276կ\312>\337 \357>Q\314\n\276\227\r[\276\237\020\272\276\231\354\003>ø\203==\327L\276\340\252b\276\322+˼\261F\347\276>\037\061?\020\241ͽ\254$\322<\216\355\030\277I\261\276\275-\227\340\276@\224\321=\213nľ\317\005\255\275G\355#>\371\071\033?\372'\217>ywP\276\n\377\211\276L\bj\276\245\271\374\276:\034\340\276F\353\021>\002\241\261?X\233\324>\226\354\350\275\326\327\027\275\221\303\001\277v\325s\276\207\272\230\276K\336_>\001\062k>\204\030\356\276P\035\270\275\330\350\017>Hl\037?\001\216\240>\240\323\005\273=\340_>\207x\021\277"..., 
        raw_const = 0x7ffff64f13f0 "=\306\023\275a\215A?\325\344Q\276\206\360\221\276կ\312>\337 \357>Q\314\n\276\227\r[\276\237\020\272\276\231\354\003>ø\203==\327L\276\340\252b\276\322+˼\261F\347\276>\037\061?\020\241ͽ\254$\322<\216\355\030\277I\261\276\275-\227\340\276@\224\321=\213nľ\317\005\255\275G\355#>\371\071\033?\372'\217>ywP\276\n\377\211\276L\bj\276\245\271\374\276:\034\340\276F\353\021>\002\241\261?X\233\324>\226\354\350\275\326\327\027\275\221\303\001\277v\325s\276\207\272\230\276K\336_>\001\062k>\204\030\356\276P\035\270\275\330\350\017>Hl\037?\001\216\240>\240\323\005\273=\340_>\207x\021\277"..., 
        uint8 = 0x7ffff64f13f0 "=\306\023\275a\215A?\325\344Q\276\206\360\221\276կ\312>\337 \357>Q\314\n\276\227\r[\276\237\020\272\276\231\354\003>ø\203==\327L\276\340\252b\276\322+˼\261F\347\276>\037\061?\020\241ͽ\254$\322<\216\355\030\277I\261\276\275-\227\340\276@\224\321=\213nľ\317\005\255\275G\355#>\371\071\033?\372'\217>ywP\276\n\377\211\276L\bj\276\245\271\374\276:\034\340\276F\353\021>\002\241\261?X\233\324>\226\354\350\275\326\327\027\275\221\303\001\277v\325s\276\207\272\230\276K\336_>\001\062k>\204\030\356\276P\035\270\275\330\350\017>Hl\037?\001\216\240>\240\323\005\273=\340_>\207x\021\277"..., 
        b = 0x7ffff64f13f0, 
        i16 = 0x7ffff64f13f0, 
        c64 = 0x7ffff64f13f0, 
        c128 = 0x7ffff64f13f0, 
        int8 = 0x7ffff64f13f0 "=\306\023\275a\215A?\325\344Q\276\206\360\221\276կ\312>\337 \357>Q\314\n\276\227\r[\276\237\020\272\276\231\354\003>ø\203==\327L\276\340\252b\276\322+˼\261F\347\276>\037\061?\020\241ͽ\254$\322<\216\355\030\277I\261\276\275-\227\340\276@\224\321=\213nľ\317\005\255\275G\355#>\371\071\033?\372'\217>ywP\276\n\377\211\276L\bj\276\245\271\374\276:\034\340\276F\353\021>\002\241\261?X\233\324>\226\354\350\275\326\327\027\275\221\303\001\277v\325s\276\207\272\230\276K\336_>\001\062k>\204\030\356\276P\035\270\275\330\350\017>Hl\037?\001\216\240>\240\323\005\273=\340_>\207x\021\277"..., 
        data = 0x7ffff64f13f0
      }, 
      dims = 0xe8d6b0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 9216, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce4bc4 "MobilenetV1/Conv2d_5_depthwise/depthwise_weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff66a814c, 
        u32 = 0x7ffff66a814c, 
        i64 = 0x7ffff66a814c, 
        u64 = 0x7ffff66a814c, 
        f = 0x7ffff66a814c, 
        f16 = 0x7ffff66a814c, 
        f64 = 0x7ffff66a814c, 
        raw = 0x7ffff66a814c "\311\322\063\274ٳ\004=\200\206\r=s\355]\275\251\023\362\273DR\223\274\366\223\320=\t镾\017\306O\273\344\223C\274m\342\b>X;\377<J#\255<\250\\'\274\353\215\b\276\270\206Z=\364M\227\274\026'\207\275\243R\b>7\002\">\317gZ=\364}\004\276\177ڨ\274\377\324\b<R\025*\276R\350\245<b\004\357\274Aì<\v\225\302=5\261\003<x\347K\276\213.\023\275\272b\217=ܯ\371\274q\005\003=u\366\060=~\361\266=̳\031\275\020@\202\275\370\375\330=\260e\264<O\031\026>O\003n\275\034ϝ=\253\243\352<\370\246\350<1K\345\275#\351\346\274\a|3=\301\257\223="..., 
        raw_const = 0x7ffff66a814c "\311\322\063\274ٳ\004=\200\206\r=s\355]\275\251\023\362\273DR\223\274\366\223\320=\t镾\017\306O\273\344\223C\274m\342\b>X;\377<J#\255<\250\\'\274\353\215\b\276\270\206Z=\364M\227\274\026'\207\275\243R\b>7\002\">\317gZ=\364}\004\276\177ڨ\274\377\324\b<R\025*\276R\350\245<b\004\357\274Aì<\v\225\302=5\261\003<x\347K\276\213.\023\275\272b\217=ܯ\371\274q\005\003=u\366\060=~\361\266=̳\031\275\020@\202\275\370\375\330=\260e\264<O\031\026>O\003n\275\034ϝ=\253\243\352<\370\246\350<1K\345\275#\351\346\274\a|3=\301\257\223="..., 
        uint8 = 0x7ffff66a814c "\311\322\063\274ٳ\004=\200\206\r=s\355]\275\251\023\362\273DR\223\274\366\223\320=\t镾\017\306O\273\344\223C\274m\342\b>X;\377<J#\255<\250\\'\274\353\215\b\276\270\206Z=\364M\227\274\026'\207\275\243R\b>7\002\">\317gZ=\364}\004\276\177ڨ\274\377\324\b<R\025*\276R\350\245<b\004\357\274Aì<\v\225\302=5\261\003<x\347K\276\213.\023\275\272b\217=ܯ\371\274q\005\003=u\366\060=~\361\266=̳\031\275\020@\202\275\370\375\330=\260e\264<O\031\026>O\003n\275\034ϝ=\253\243\352<\370\246\350<1K\345\275#\351\346\274\a|3=\301\257\223="..., 
        b = 0x7ffff66a814c, 
        i16 = 0x7ffff66a814c, 
        c64 = 0x7ffff66a814c, 
        c128 = 0x7ffff66a814c, 
        int8 = 0x7ffff66a814c "\311\322\063\274ٳ\004=\200\206\r=s\355]\275\251\023\362\273DR\223\274\366\223\320=\t镾\017\306O\273\344\223C\274m\342\b>X;\377<J#\255<\250\\'\274\353\215\b\276\270\206Z=\364M\227\274\026'\207\275\243R\b>7\002\">\317gZ=\364}\004\276\177ڨ\274\377\324\b<R\025*\276R\350\245<b\004\357\274Aì<\v\225\302=5\261\003<x\347K\276\213.\023\275\272b\217=ܯ\371\274q\005\003=u\366\060=~\361\266=̳\031\275\020@\202\275\370\375\330=\260e\264<O\031\026>O\003n\275\034ϝ=\253\243\352<\370\246\350<1K\345\275#\351\346\274\a|3=\301\257\223="..., 
        data = 0x7ffff66a814c
      }, 
      dims = 0xe8d6d0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 262144, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce53b8 "MobilenetV1/Conv2d_5_pointwise/weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6512238, 
        u32 = 0x7ffff6512238, 
        i64 = 0x7ffff6512238, 
        u64 = 0x7ffff6512238, 
        f = 0x7ffff6512238, 
        f16 = 0x7ffff6512238, 
        f64 = 0x7ffff6512238, 
        raw = 0x7ffff6512238 "\346\267J>\257&K\275\225M\216>\302=\252\276\327\t\300\276?\237;\275\274\240\207\276\304\332d\276{\257\351\276϶\241\276\002u5>_\tJ?&Sƾcr\v\277\065\262@\276\016\373\003\277p\225E\276\367\b\235\276\200\214\251\276\363%n>\271\311！\r:\277|B\370>.\002\060?\f!,\277", 
        raw_const = 0x7ffff6512238 "\346\267J>\257&K\275\225M\216>\302=\252\276\327\t\300\276?\237;\275\274\240\207\276\304\332d\276{\257\351\276϶\241\276\002u5>_\tJ?&Sƾcr\v\277\065\262@\276\016\373\003\277p\225E\276\367\b\235\276\200\214\251\276\363%n>\271\311！\r:\277|B\370>.\002\060?\f!,\277", 
        uint8 = 0x7ffff6512238 "\346\267J>\257&K\275\225M\216>\302=\252\276\327\t\300\276?\237;\275\274\240\207\276\304\332d\276{\257\351\276϶\241\276\002u5>_\tJ?&Sƾcr\v\277\065\262@\276\016\373\003\277p\225E\276\367\b\235\276\200\214\251\276\363%n>\271\311！\r:\277|B\370>.\002\060?\f!,\277", 
        b = 0x7ffff6512238, 
        i16 = 0x7ffff6512238, 
        c64 = 0x7ffff6512238, 
        c128 = 0x7ffff6512238, 
        int8 = 0x7ffff6512238 "\346\267J>\257&K\275\225M\216>\302=\252\276\327\t\300\276?\237;\275\274\240\207\276\304\332d\276{\257\351\276϶\241\276\002u5>_\tJ?&Sƾcr\v\277\065\262@\276\016\373\003\277p\225E\276\367\b\235\276\200\214\251\276\363%n>\271\311！\r:\277|B\370>.\002\060?\f!,\277", 
        data = 0x7ffff6512238
      }, 
      dims = 0xe8d6f0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 9216, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce4ed8 "MobilenetV1/Conv2d_6_depthwise/depthwise_weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff651d5f4, 
        u32 = 0x7ffff651d5f4, 
        i64 = 0x7ffff651d5f4, 
        u64 = 0x7ffff651d5f4, 
        f = 0x7ffff651d5f4, 
        f16 = 0x7ffff651d5f4, 
        f64 = 0x7ffff651d5f4, 
        raw = 0x7ffff651d5f4 "\204AP<o\035༭;\247<ZS\365\275\220\266\r\276\272\004\343\275c\vD\275o\204\211<\246\026\326=[\241`\276\310\361\315<\343X뽜\334\031\274\266&\t=PzB\274\262$&=\223i\340<\273B\242\275\065 J\276\\\223\256\274QA\302<\030P\233=\215\243\205\275\351\n\334<\200=f\275\223\246\201<\222\214", 
        raw_const = 0x7ffff651d5f4 "\204AP<o\035༭;\247<ZS\365\275\220\266\r\276\272\004\343\275c\vD\275o\204\211<\246\026\326=[\241`\276\310\361\315<\343X뽜\334\031\274\266&\t=PzB\274\262$&=\223i\340<\273B\242\275\065 J\276\\\223\256\274QA\302<\030P\233=\215\243\205\275\351\n\334<\200=f\275\223\246\201<\222\214", 
        uint8 = 0x7ffff651d5f4 "\204AP<o\035༭;\247<ZS\365\275\220\266\r\276\272\004\343\275c\vD\275o\204\211<\246\026\326=[\241`\276\310\361\315<\343X뽜\334\031\274\266&\t=PzB\274\262$&=\223i\340<\273B\242\275\065 J\276\\\223\256\274QA\302<\030P\233=\215\243\205\275\351\n\334<\200=f\275\223\246\201<\222\214", 
        b = 0x7ffff651d5f4, 
        i16 = 0x7ffff651d5f4, 
        c64 = 0x7ffff651d5f4, 
        c128 = 0x7ffff651d5f4, 
        int8 = 0x7ffff651d5f4 "\204AP<o\035༭;\247<ZS\365\275\220\266\r\276\272\004\343\275c\vD\275o\204\211<\246\026\326=[\241`\276\310\361\315<\343X뽜\334\031\274\266&\t=PzB\274\262$&=\223i\340<\273B\242\275\065 J\276\\\223\256\274QA\302<\030P\233=\215\243\205\275\351\n\334<\200=f\275\223\246\201<\222\214", 
        data = 0x7ffff651d5f4
      }, 
      dims = 0xe8d710, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 524288, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce50b8 "MobilenetV1/Conv2d_6_pointwise/weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff64f4a08, 
        u32 = 0x7ffff64f4a08, 
        i64 = 0x7ffff64f4a08, 
        u64 = 0x7ffff64f4a08, 
        f = 0x7ffff64f4a08, 
        f16 = 0x7ffff64f4a08, 
        f64 = 0x7ffff64f4a08, 
        raw = 0x7ffff64f4a08 "F\240\274\276\231\332\376\276\251\251t=cu\232\275\200\374\215>\200b\301\274\024\262\254=\026\360\023\275\r\351\334<*P\311>C\265\t? \251\204\276\301\374B>.\200\371=a\325\017\276\266\252\206<_\004Y\276\060'\021?\233l\036>s\\\210\277\035\023\226<^ޭ\275\315܍\276\223\246\224\276\376Ԅ\276\353S\001?^m\264>\201\307\071\276u.\221\275Dp(\276\210\314\361\276\033\300\236\276\201/\003\277Ӳ\241\275\227lW\276\245k\026\276E}q>ܭ˾\373\207\350<cl\253\276;\240\354\275\364]\271>!\367\022\275\025\270\062\276ᬃ\275\231ʴ\276\017\336U>\356H", 
        raw_const = 0x7ffff64f4a08 "F\240\274\276\231\332\376\276\251\251t=cu\232\275\200\374\215>\200b\301\274\024\262\254=\026\360\023\275\r\351\334<*P\311>C\265\t? \251\204\276\301\374B>.\200\371=a\325\017\276\266\252\206<_\004Y\276\060'\021?\233l\036>s\\\210\277\035\023\226<^ޭ\275\315܍\276\223\246\224\276\376Ԅ\276\353S\001?^m\264>\201\307\071\276u.\221\275Dp(\276\210\314\361\276\033\300\236\276\201/\003\277Ӳ\241\275\227lW\276\245k\026\276E}q>ܭ˾\373\207\350<cl\253\276;\240\354\275\364]\271>!\367\022\275\025\270\062\276ᬃ\275\231ʴ\276\017\336U>\356H", 
        uint8 = 0x7ffff64f4a08 "F\240\274\276\231\332\376\276\251\251t=cu\232\275\200\374\215>\200b\301\274\024\262\254=\026\360\023\275\r\351\334<*P\311>C\265\t? \251\204\276\301\374B>.\200\371=a\325\017\276\266\252\206<_\004Y\276\060'\021?\233l\036>s\\\210\277\035\023\226<^ޭ\275\315܍\276\223\246\224\276\376Ԅ\276\353S\001?^m\264>\201\307\071\276u.\221\275Dp(\276\210\314\361\276\033\300\236\276\201/\003\277Ӳ\241\275\227lW\276\245k\026\276E}q>ܭ˾\373\207\350<cl\253\276;\240\354\275\364]\271>!\367\022\275\025\270\062\276ᬃ\275\231ʴ\276\017\336U>\356H", 
        b = 0x7ffff64f4a08, 
        i16 = 0x7ffff64f4a08, 
        c64 = 0x7ffff64f4a08, 
        c128 = 0x7ffff64f4a08, 
        int8 = 0x7ffff64f4a08 "F\240\274\276\231\332\376\276\251\251t=cu\232\275\200\374\215>\200b\301\274\024\262\254=\026\360\023\275\r\351\334<*P\311>C\265\t? \251\204\276\301\374B>.\200\371=a\325\017\276\266\252\206<_\004Y\276\060'\021?\233l\036>s\\\210\277\035\023\226<^ޭ\275\315܍\276\223\246\224\276\376Ԅ\276\353S\001?^m\264>\201\307\071\276u.\221\275Dp(\276\210\314\361\276\033\300\236\276\201/\003\277Ӳ\241\275\227lW\276\245k\026\276E}q>ܭ˾\373\207\350<cl\253\276;\240\354\275\364]\271>!\367\022\275\025\270\062\276ᬃ\275\231ʴ\276\017\336U>\356H", 
        data = 0x7ffff64f4a08
      }, 
      dims = 0xe8d730, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 18432, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce4c8c "MobilenetV1/Conv2d_7_depthwise/depthwise_weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff67ef190, 
        u32 = 0x7ffff67ef190, 
        i64 = 0x7ffff67ef190, 
        u64 = 0x7ffff67ef190, 
        f = 0x7ffff67ef190, 
        f16 = 0x7ffff67ef190, 
        f64 = 0x7ffff67ef190, 
        raw = 0x7ffff67ef190 "\331\021\002\274{\277\363\274\266\352\337<\250\220F\274\344b\r=\352&\f\275 ]]=\212\353\026<\232pX\274>|\217=\277\317#\275\016\353i\275\271\261\352<\241\300\302<\375\032\\=6x\231\273EB\v\273Ԋn\273?\367\035=\206~7<\242\330\372:\204\301C\274\367kI<\272Ʒ;\"\360Ѽ\215\064\001\273\064\025\061=\023?\016;\021\253\252=\225\025\224\275zh\307<\366f", 
        raw_const = 0x7ffff67ef190 "\331\021\002\274{\277\363\274\266\352\337<\250\220F\274\344b\r=\352&\f\275 ]]=\212\353\026<\232pX\274>|\217=\277\317#\275\016\353i\275\271\261\352<\241\300\302<\375\032\\=6x\231\273EB\v\273Ԋn\273?\367\035=\206~7<\242\330\372:\204\301C\274\367kI<\272Ʒ;\"\360Ѽ\215\064\001\273\064\025\061=\023?\016;\021\253\252=\225\025\224\275zh\307<\366f", 
        uint8 = 0x7ffff67ef190 "\331\021\002\274{\277\363\274\266\352\337<\250\220F\274\344b\r=\352&\f\275 ]]=\212\353\026<\232pX\274>|\217=\277\317#\275\016\353i\275\271\261\352<\241\300\302<\375\032\\=6x\231\273EB\v\273Ԋn\273?\367\035=\206~7<\242\330\372:\204\301C\274\367kI<\272Ʒ;\"\360Ѽ\215\064\001\273\064\025\061=\023?\016;\021\253\252=\225\025\224\275zh\307<\366f", 
        b = 0x7ffff67ef190, 
        i16 = 0x7ffff67ef190, 
        c64 = 0x7ffff67ef190, 
        c128 = 0x7ffff67ef190, 
        int8 = 0x7ffff67ef190 "\331\021\002\274{\277\363\274\266\352\337<\250\220F\274\344b\r=\352&\f\275 ]]=\212\353\026<\232pX\274>|\217=\277\317#\275\016\353i\275\271\261\352<\241\300\302<\375\032\\=6x\231\273EB\v\273Ԋn\273?\367\035=\206~7<\242\330\372:\204\301C\274\367kI<\272Ʒ;\"\360Ѽ\215\064\001\273\064\025\061=\023?\016;\021\253\252=\225\025\224\275zh\307<\366f", 
        data = 0x7ffff67ef190
      }, 
      dims = 0xe8d750, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 1048576, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce563c "MobilenetV1/Conv2d_7_pointwise/weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff63ecbc8, 
        u32 = 0x7ffff63ecbc8, 
        i64 = 0x7ffff63ecbc8, 
        u64 = 0x7ffff63ecbc8, 
        f = 0x7ffff63ecbc8, 
        f16 = 0x7ffff63ecbc8, 
        f64 = 0x7ffff63ecbc8, 
        raw = 0x7ffff63ecbc8 "TS[>)\265\303=(\a\236;\227\232\242>˱\247\276\335\f\205\275\"\006", 
        raw_const = 0x7ffff63ecbc8 "TS[>)\265\303=(\a\236;\227\232\242>˱\247\276\335\f\205\275\"\006", 
        uint8 = 0x7ffff63ecbc8 "TS[>)\265\303=(\a\236;\227\232\242>˱\247\276\335\f\205\275\"\006", 
        b = 0x7ffff63ecbc8, 
        i16 = 0x7ffff63ecbc8, 
        c64 = 0x7ffff63ecbc8, 
        c128 = 0x7ffff63ecbc8, 
        int8 = 0x7ffff63ecbc8 "TS[>)\265\303=(\a\236;\227\232\242>˱\247\276\335\f\205\275\"\006", 
        data = 0x7ffff63ecbc8
      }, 
      dims = 0xe8d770, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 18432, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce4990 "MobilenetV1/Conv2d_8_depthwise/depthwise_weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff63f13e0, 
        u32 = 0x7ffff63f13e0, 
        i64 = 0x7ffff63f13e0, 
        u64 = 0x7ffff63f13e0, 
        f = 0x7ffff63f13e0, 
        f16 = 0x7ffff63f13e0, 
        f64 = 0x7ffff63f13e0, 
        raw = 0x7ffff63f13e0 "[\327\325<\212\262\364<\354p\a=ТϼlL!\275s\214q<\370\336̽\033*\377<Q\267o\275\031\003\242\274W\303\327:c\204˽\221\\k\272\004$e\275\236\337\305<\315/\262\071\303~\371;\262\300\215;\373\372\367<\005\036\001\275\027Wa=\371\273\256\273c!+\274U6\373=F5\222=j\210H\275\311\002ż\250i\217=\216\267\230\275I\016\250\274x\322\064\275^\344(<\365\231\370\273l\205\213=\276mC<L\032\262\274\265m\202\274\032\375\t=\364R%<\272\222\"\275\030<\253<\371\t\215<\n8I=k\277\t=9", 
        raw_const = 0x7ffff63f13e0 "[\327\325<\212\262\364<\354p\a=ТϼlL!\275s\214q<\370\336̽\033*\377<Q\267o\275\031\003\242\274W\303\327:c\204˽\221\\k\272\004$e\275\236\337\305<\315/\262\071\303~\371;\262\300\215;\373\372\367<\005\036\001\275\027Wa=\371\273\256\273c!+\274U6\373=F5\222=j\210H\275\311\002ż\250i\217=\216\267\230\275I\016\250\274x\322\064\275^\344(<\365\231\370\273l\205\213=\276mC<L\032\262\274\265m\202\274\032\375\t=\364R%<\272\222\"\275\030<\253<\371\t\215<\n8I=k\277\t=9", 
        uint8 = 0x7ffff63f13e0 "[\327\325<\212\262\364<\354p\a=ТϼlL!\275s\214q<\370\336̽\033*\377<Q\267o\275\031\003\242\274W\303\327:c\204˽\221\\k\272\004$e\275\236\337\305<\315/\262\071\303~\371;\262\300\215;\373\372\367<\005\036\001\275\027Wa=\371\273\256\273c!+\274U6\373=F5\222=j\210H\275\311\002ż\250i\217=\216\267\230\275I\016\250\274x\322\064\275^\344(<\365\231\370\273l\205\213=\276mC<L\032\262\274\265m\202\274\032\375\t=\364R%<\272\222\"\275\030<\253<\371\t\215<\n8I=k\277\t=9", 
        b = 0x7ffff63f13e0, 
        i16 = 0x7ffff63f13e0, 
        c64 = 0x7ffff63f13e0, 
        c128 = 0x7ffff63f13e0, 
        int8 = 0x7ffff63f13e0 "[\327\325<\212\262\364<\354p\a=ТϼlL!\275s\214q<\370\336̽\033*\377<Q\267o\275\031\003\242\274W\303\327:c\204˽\221\\k\272\004$e\275\236\337\305<\315/\262\071\303~\371;\262\300\215;\373\372\367<\005\036\001\275\027Wa=\371\273\256\273c!+\274U6\373=F5\222=j\210H\275\311\002ż\250i\217=\216\267\230\275I\016\250\274x\322\064\275^\344(<\365\231\370\273l\205\213=\276mC<L\032\262\274\265m\202\274\032\375\t=\364R%<\272\222\"\275\030<\253<\371\t\215<\n8I=k\277\t=9", 
        data = 0x7ffff63f13e0
      }, 
      dims = 0xe8d790, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 1048576, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce4b08 "MobilenetV1/Conv2d_8_pointwise/weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff65a301c, 
        u32 = 0x7ffff65a301c, 
        i64 = 0x7ffff65a301c, 
        u64 = 0x7ffff65a301c, 
        f = 0x7ffff65a301c, 
        f16 = 0x7ffff65a301c, 
        f64 = 0x7ffff65a301c, 
        raw = 0x7ffff65a301c "\274\027a\272e#W=\202&\267>\313\325R\275\222;I\276\212\203f\276\327\217\213==㔽q\003\t\277\221\024\257>O\213\241\276\202\r3=\343My>T\340\004?C\266M?\267\337\351\275\021(\346=\272\247\017>\377\002\353=\274I3>\241\071\226\276J\fE>ߧ\356\275[_K\275K8t\276J\020\232>\332\030\245=\017\070\022\276~\317\r\274h\336\262=\250\354\255=ls\241\275Ө\231=\270\b\273\276\061!\260\276\203^\304>", 
        raw_const = 0x7ffff65a301c "\274\027a\272e#W=\202&\267>\313\325R\275\222;I\276\212\203f\276\327\217\213==㔽q\003\t\277\221\024\257>O\213\241\276\202\r3=\343My>T\340\004?C\266M?\267\337\351\275\021(\346=\272\247\017>\377\002\353=\274I3>\241\071\226\276J\fE>ߧ\356\275[_K\275K8t\276J\020\232>\332\030\245=\017\070\022\276~\317\r\274h\336\262=\250\354\255=ls\241\275Ө\231=\270\b\273\276\061!\260\276\203^\304>", 
        uint8 = 0x7ffff65a301c "\274\027a\272e#W=\202&\267>\313\325R\275\222;I\276\212\203f\276\327\217\213==㔽q\003\t\277\221\024\257>O\213\241\276\202\r3=\343My>T\340\004?C\266M?\267\337\351\275\021(\346=\272\247\017>\377\002\353=\274I3>\241\071\226\276J\fE>ߧ\356\275[_K\275K8t\276J\020\232>\332\030\245=\017\070\022\276~\317\r\274h\336\262=\250\354\255=ls\241\275Ө\231=\270\b\273\276\061!\260\276\203^\304>", 
        b = 0x7ffff65a301c, 
        i16 = 0x7ffff65a301c, 
        c64 = 0x7ffff65a301c, 
        c128 = 0x7ffff65a301c, 
        int8 = 0x7ffff65a301c "\274\027a\272e#W=\202&\267>\313\325R\275\222;I\276\212\203f\276\327\217\213==㔽q\003\t\277\221\024\257>O\213\241\276\202\r3=\343My>T\340\004?C\266M?\267\337\351\275\021(\346=\272\247\017>\377\002\353=\274I3>\241\071\226\276J\fE>ߧ\356\275[_K\275K8t\276J\020\232>\332\030\245=\017\070\022\276~\317\r\274h\336\262=\250\354\255=ls\241\275Ө\231=\270\b\273\276\061!\260\276\203^\304>", 
        data = 0x7ffff65a301c
      }, 
      dims = 0xe8d7b0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 18432, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce523c "MobilenetV1/Conv2d_9_depthwise/depthwise_weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff65a8034, 
        u32 = 0x7ffff65a8034, 
        i64 = 0x7ffff65a8034, 
        u64 = 0x7ffff65a8034, 
        f = 0x7ffff65a8034, 
        f16 = 0x7ffff65a8034, 
        f64 = 0x7ffff65a8034, 
        raw = 0x7ffff65a8034 "\242\004\251<\202\270\031\274\032;}<p\376n\274Y\373_=*\216\227;\177\b\267<\202\023e\275\311\064潀J\023\071G\264\265;\214\327\177\275\301k\017<\030\033t\272\020+B\272v\v\343<\037\023U:\251#\210=u\021\342<\312\311\061\274v\022\252<\030_<\275n\207\226\274\220\235\a\275\342\020V\275!\353\202;\032퇹3\031\250<`\357m<\363\271ϼ]5'=`R\234=\006\024\241\275\\\347\b=\271G\275\275b\001;\275<\226C\274\355q[=H\307\375<\277_y\274\313\366\342\272k\377\036\274*5z;\356X%\274\363\062\261\275)\370\003\275\325B\311:8g\220\274\247}}<\030/v\275"..., 
        raw_const = 0x7ffff65a8034 "\242\004\251<\202\270\031\274\032;}<p\376n\274Y\373_=*\216\227;\177\b\267<\202\023e\275\311\064潀J\023\071G\264\265;\214\327\177\275\301k\017<\030\033t\272\020+B\272v\v\343<\037\023U:\251#\210=u\021\342<\312\311\061\274v\022\252<\030_<\275n\207\226\274\220\235\a\275\342\020V\275!\353\202;\032퇹3\031\250<`\357m<\363\271ϼ]5'=`R\234=\006\024\241\275\\\347\b=\271G\275\275b\001;\275<\226C\274\355q[=H\307\375<\277_y\274\313\366\342\272k\377\036\274*5z;\356X%\274\363\062\261\275)\370\003\275\325B\311:8g\220\274\247}}<\030/v\275"..., 
        uint8 = 0x7ffff65a8034 "\242\004\251<\202\270\031\274\032;}<p\376n\274Y\373_=*\216\227;\177\b\267<\202\023e\275\311\064潀J\023\071G\264\265;\214\327\177\275\301k\017<\030\033t\272\020+B\272v\v\343<\037\023U:\251#\210=u\021\342<\312\311\061\274v\022\252<\030_<\275n\207\226\274\220\235\a\275\342\020V\275!\353\202;\032퇹3\031\250<`\357m<\363\271ϼ]5'=`R\234=\006\024\241\275\\\347\b=\271G\275\275b\001;\275<\226C\274\355q[=H\307\375<\277_y\274\313\366\342\272k\377\036\274*5z;\356X%\274\363\062\261\275)\370\003\275\325B\311:8g\220\274\247}}<\030/v\275"..., 
        b = 0x7ffff65a8034, 
        i16 = 0x7ffff65a8034, 
        c64 = 0x7ffff65a8034, 
        c128 = 0x7ffff65a8034, 
        int8 = 0x7ffff65a8034 "\242\004\251<\202\270\031\274\032;}<p\376n\274Y\373_=*\216\227;\177\b\267<\202\023e\275\311\064潀J\023\071G\264\265;\214\327\177\275\301k\017<\030\033t\272\020+B\272v\v\343<\037\023U:\251#\210=u\021\342<\312\311\061\274v\022\252<\030_<\275n\207\226\274\220\235\a\275\342\020V\275!\353\202;\032퇹3\031\250<`\357m<\363\271ϼ]5'=`R\234=\006\024\241\275\\\347\b=\271G\275\275b\001;\275<\226C\274\355q[=H\307\375<\277_y\274\313\366\342\272k\377\036\274*5z;\356X%\274\363\062\261\275)\370\003\275\325B\311:8g\220\274\247}}<\030/v\275"..., 
        data = 0x7ffff65a8034
      }, 
      dims = 0xe8d7d0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 1048576, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce5300 "MobilenetV1/Conv2d_9_pointwise/weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe933d0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 4096, 
      allocation = 0x0, 
      name = 0x7ffff6ce586c "MobilenetV1/Logits/AvgPool_1a/AvgPool", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8d810
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff4a33040, 
        u32 = 0x7ffff4a33040, 
        i64 = 0x7ffff4a33040, 
        u64 = 0x7ffff4a33040, 
        f = 0x7ffff4a33040, 
        f16 = 0x7ffff4a33040, 
        f64 = 0x7ffff4a33040, 
        raw = 0x7ffff4a33040 "", 
        raw_const = 0x7ffff4a33040 "", 
        uint8 = 0x7ffff4a33040 "", 
        b = 0x7ffff4a33040, 
        i16 = 0x7ffff4a33040, 
        c64 = 0x7ffff4a33040, 
        c128 = 0x7ffff4a33040, 
        int8 = 0x7ffff4a33040 "", 
        data = 0x7ffff4a33040
      }, 
      dims = 0xe8d7f0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 4004, 
      allocation = 0x0, 
      name = 0x7ffff6ce5a4c "MobilenetV1/Logits/Conv2d_1c_1x1/BiasAdd", 
      delegate = 0xe914c0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8d850
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6ce26d4, 
        u32 = 0x7ffff6ce26d4, 
        i64 = 0x7ffff6ce26d4, 
        u64 = 0x7ffff6ce26d4, 
        f = 0x7ffff6ce26d4, 
        f16 = 0x7ffff6ce26d4, 
        f64 = 0x7ffff6ce26d4, 
        raw = 0x7ffff6ce26d4 "ع\v\277\064\322D\276\252u\220==\334\016\277\355\223\a\277\032-\207<.y\033< O\233\276N\354\255=\336^M\276z\251Y\276my\220\276\376\373\337\276\r\326g\276\272=D\276\vz\205\276\371\017e\276\030\216νϢ2\276\375\223\201=\026>c\276\303\066+\276\242\274T>\002\212\250\275d=\237=\265\220\273=\225\005\374\275=Ȕ=Fa\v\276\233\260:>\240\304\316=\f_W=\346#\017\275|X\355=h\207¾\226g'>q\032\246\276\336\374\024>5\b\262\276\335\342 >\301\314\350\274W\265Z\275£\322<\276\006\021=7\374\261\276\322]\365=\225H", 
        raw_const = 0x7ffff6ce26d4 "ع\v\277\064\322D\276\252u\220==\334\016\277\355\223\a\277\032-\207<.y\033< O\233\276N\354\255=\336^M\276z\251Y\276my\220\276\376\373\337\276\r\326g\276\272=D\276\vz\205\276\371\017e\276\030\216νϢ2\276\375\223\201=\026>c\276\303\066+\276\242\274T>\002\212\250\275d=\237=\265\220\273=\225\005\374\275=Ȕ=Fa\v\276\233\260:>\240\304\316=\f_W=\346#\017\275|X\355=h\207¾\226g'>q\032\246\276\336\374\024>5\b\262\276\335\342 >\301\314\350\274W\265Z\275£\322<\276\006\021=7\374\261\276\322]\365=\225H", 
        uint8 = 0x7ffff6ce26d4 "ع\v\277\064\322D\276\252u\220==\334\016\277\355\223\a\277\032-\207<.y\033< O\233\276N\354\255=\336^M\276z\251Y\276my\220\276\376\373\337\276\r\326g\276\272=D\276\vz\205\276\371\017e\276\030\216νϢ2\276\375\223\201=\026>c\276\303\066+\276\242\274T>\002\212\250\275d=\237=\265\220\273=\225\005\374\275=Ȕ=Fa\v\276\233\260:>\240\304\316=\f_W=\346#\017\275|X\355=h\207¾\226g'>q\032\246\276\336\374\024>5\b\262\276\335\342 >\301\314\350\274W\265Z\275£\322<\276\006\021=7\374\261\276\322]\365=\225H", 
        b = 0x7ffff6ce26d4, 
        i16 = 0x7ffff6ce26d4, 
        c64 = 0x7ffff6ce26d4, 
        c128 = 0x7ffff6ce26d4, 
        int8 = 0x7ffff6ce26d4 "ع\v\277\064\322D\276\252u\220==\334\016\277\355\223\a\277\032-\207<.y\033< O\233\276N\354\255=\336^M\276z\251Y\276my\220\276\376\373\337\276\r\326g\276\272=D\276\vz\205\276\371\017e\276\030\216νϢ2\276\375\223\201=\026>c\276\303\066+\276\242\274T>\002\212\250\275d=\237=\265\220\273=\225\005\374\275=Ȕ=Fa\v\276\233\260:>\240\304\316=\f_W=\346#\017\275|X\355=h\207¾\226g'>q\032\246\276\336\374\024>5\b\262\276\335\342 >\301\314\350\274W\265Z\275£\322<\276\006\021=7\374\261\276\322]\365=\225H", 
        data = 0x7ffff6ce26d4
      }, 
      dims = 0xe8d870, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 4004, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce6258 "MobilenetV1/Logits/Conv2d_1c_1x1/Conv2D_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff68ef19c, 
        u32 = 0x7ffff68ef19c, 
        i64 = 0x7ffff68ef19c, 
        u64 = 0x7ffff68ef19c, 
        f = 0x7ffff68ef19c, 
        f16 = 0x7ffff68ef19c, 
        f64 = 0x7ffff68ef19c, 
        raw = 0x7ffff68ef19c "\337]M\273%\204\204\273\062\002\065\273f-\240\273\064\f\235\273\273\021b\273\021\351]\273\317P\232\273X", 
        raw_const = 0x7ffff68ef19c "\337]M\273%\204\204\273\062\002\065\273f-\240\273\064\f\235\273\273\021b\273\021\351]\273\317P\232\273X", 
        uint8 = 0x7ffff68ef19c "\337]M\273%\204\204\273\062\002\065\273f-\240\273\064\f\235\273\273\021b\273\021\351]\273\317P\232\273X", 
        b = 0x7ffff68ef19c, 
        i16 = 0x7ffff68ef19c, 
        c64 = 0x7ffff68ef19c, 
        c128 = 0x7ffff68ef19c, 
        int8 = 0x7ffff68ef19c "\337]M\273%\204\204\273\062\002\065\273f-\240\273\064\f\235\273\273\021b\273\021\351]\273\317P\232\273X", 
        data = 0x7ffff68ef19c
      }, 
      dims = 0xe8d890, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 4100096, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce5694 "MobilenetV1/Logits/Conv2d_1c_1x1/weights", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff4a34000, 
        u32 = 0x7ffff4a34000, 
        i64 = 0x7ffff4a34000, 
        u64 = 0x7ffff4a34000, 
        f = 0x7ffff4a34000, 
        f16 = 0x7ffff4a34000, 
        f64 = 0x7ffff4a34000, 
        raw = 0x7ffff4a34000 "", 
        raw_const = 0x7ffff4a34000 "", 
        uint8 = 0x7ffff4a34000 "", 
        b = 0x7ffff4a34000, 
        i16 = 0x7ffff4a34000, 
        c64 = 0x7ffff4a34000, 
        c128 = 0x7ffff4a34000, 
        int8 = 0x7ffff4a34000 "", 
        data = 0x7ffff4a34000
      }, 
      dims = 0xedca20, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 4004, 
      allocation = 0x0, 
      name = 0x7ffff6ce4abc "MobilenetV1/Logits/SpatialSqueeze", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8d8d0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6cd9364, 
        u32 = 0x7ffff6cd9364, 
        i64 = 0x7ffff6cd9364, 
        u64 = 0x7ffff6cd9364, 
        f = 0x7ffff6cd9364, 
        f16 = 0x7ffff6cd9364, 
        f64 = 0x7ffff6cd9364, 
        raw = 0x7ffff6cd9364 "\317R\236\277\372\245\021@xa\262\276\243\060پ\220\207\325?\372y\031@\352ٕ>\334\302F@\332\370\274\276\246\200\241\277\021\067e\277\020\265\035@\360\232>@/P\353?\327O)?d'D@}I\261\277\026\343%@\205\020\005@W\203\n@\035\070\026\277\300\326\022\275\203=\016\300\370\267P@\261E\b\300z\v*@밝@\247\334⾵O\"@<Q\340?\252\234\273\276\210A]@n\\\377\377\004", 
        raw_const = 0x7ffff6cd9364 "\317R\236\277\372\245\021@xa\262\276\243\060پ\220\207\325?\372y\031@\352ٕ>\334\302F@\332\370\274\276\246\200\241\277\021\067e\277\020\265\035@\360\232>@/P\353?\327O)?d'D@}I\261\277\026\343%@\205\020\005@W\203\n@\035\070\026\277\300\326\022\275\203=\016\300\370\267P@\261E\b\300z\v*@밝@\247\334⾵O\"@<Q\340?\252\234\273\276\210A]@n\\\377\377\004", 
        uint8 = 0x7ffff6cd9364 "\317R\236\277\372\245\021@xa\262\276\243\060پ\220\207\325?\372y\031@\352ٕ>\334\302F@\332\370\274\276\246\200\241\277\021\067e\277\020\265\035@\360\232>@/P\353?\327O)?d'D@}I\261\277\026\343%@\205\020\005@W\203\n@\035\070\026\277\300\326\022\275\203=\016\300\370\267P@\261E\b\300z\v*@밝@\247\334⾵O\"@<Q\340?\252\234\273\276\210A]@n\\\377\377\004", 
        b = 0x7ffff6cd9364, 
        i16 = 0x7ffff6cd9364, 
        c64 = 0x7ffff6cd9364, 
        c128 = 0x7ffff6cd9364, 
        int8 = 0x7ffff6cd9364 "\317R\236\277\372\245\021@xa\262\276\243\060پ\220\207\325?\372y\031@\352ٕ>\334\302F@\332\370\274\276\246\200\241\277\021\067e\277\020\265\035@\360\232>@/P\353?\327O)?d'D@}I\261\277\026\343%@\205\020\005@W\203\n@\035\070\026\277\300\326\022\275\203=\016\300\370\267P@\261E\b\300z\v*@밝@\247\334⾵O\"@<Q\340?\252\234\273\276\210A]@n\\\377\377\004", 
        data = 0x7ffff6cd9364
      }, 
      dims = 0xe8d8f0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 128, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce5af4 "MobilenetV1/MobilenetV1/Conv2d_0/Conv2D_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe907c0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 1605632, 
      allocation = 0x0, 
      name = 0x7ffff6ce55e4 "MobilenetV1/MobilenetV1/Conv2d_0/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8d930
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe93350, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 401408, 
      allocation = 0x0, 
      name = 0x7ffff6ce426c "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8d970
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6cdce74, 
        u32 = 0x7ffff6cdce74, 
        i64 = 0x7ffff6cdce74, 
        u64 = 0x7ffff6cdce74, 
        f = 0x7ffff6cdce74, 
        f16 = 0x7ffff6cdce74, 
        f64 = 0x7ffff6cdce74, 
        raw = 0x7ffff6cdce74 "͑i?\004\245\303?(\b\260\277=9\266?(ʌ?ڥ\376?R8\022\277\371\003\060\276\376j\n\277\263\060\222\276\263ݡ?(g\345?+\267\002\277\020Ҳ?\240s*\274\025I\207?\315\300\352%\275\360\247\023\277x\362\301\276\030\214~\275\017f\224\276\v\250\201?\300\"x?ķн\231\215\363?\205\350#\277\262q\220?\240f\003@\205\266E\277\033\214\030\277\354\231\320?\343~(@\246_e?\263县c\\ؾ\215ƛ\276\064\234\244?g\347`?FG\256?Z\313K\277%\366ƾ\n\026V\277\344;\346\277Z\245\265?\245q\220>\220L\321?R\240;\276#\003\222?\231Vu\277"..., 
        raw_const = 0x7ffff6cdce74 "͑i?\004\245\303?(\b\260\277=9\266?(ʌ?ڥ\376?R8\022\277\371\003\060\276\376j\n\277\263\060\222\276\263ݡ?(g\345?+\267\002\277\020Ҳ?\240s*\274\025I\207?\315\300\352%\275\360\247\023\277x\362\301\276\030\214~\275\017f\224\276\v\250\201?\300\"x?ķн\231\215\363?\205\350#\277\262q\220?\240f\003@\205\266E\277\033\214\030\277\354\231\320?\343~(@\246_e?\263县c\\ؾ\215ƛ\276\064\234\244?g\347`?FG\256?Z\313K\277%\366ƾ\n\026V\277\344;\346\277Z\245\265?\245q\220>\220L\321?R\240;\276#\003\222?\231Vu\277"..., 
        uint8 = 0x7ffff6cdce74 "͑i?\004\245\303?(\b\260\277=9\266?(ʌ?ڥ\376?R8\022\277\371\003\060\276\376j\n\277\263\060\222\276\263ݡ?(g\345?+\267\002\277\020Ҳ?\240s*\274\025I\207?\315\300\352%\275\360\247\023\277x\362\301\276\030\214~\275\017f\224\276\v\250\201?\300\"x?ķн\231\215\363?\205\350#\277\262q\220?\240f\003@\205\266E\277\033\214\030\277\354\231\320?\343~(@\246_e?\263县c\\ؾ\215ƛ\276\064\234\244?g\347`?FG\256?Z\313K\277%\366ƾ\n\026V\277\344;\346\277Z\245\265?\245q\220>\220L\321?R\240;\276#\003\222?\231Vu\277"..., 
        b = 0x7ffff6cdce74, 
        i16 = 0x7ffff6cdce74, 
        c64 = 0x7ffff6cdce74, 
        c128 = 0x7ffff6cdce74, 
        int8 = 0x7ffff6cdce74 "͑i?\004\245\303?(\b\260\277=9\266?(ʌ?ڥ\376?R8\022\277\371\003\060\276\376j\n\277\263\060\222\276\263ݡ?(g\345?+\267\002\277\020Ҳ?\240s*\274\025I\207?\315\300\352%\275\360\247\023\277x\362\301\276\030\214~\275\017f\224\276\v\250\201?\300\"x?ķн\231\215\363?\205\350#\277\262q\220?\240f\003@\205\266E\277\033\214\030\277\354\231\320?\343~(@\246_e?\263县c\\ؾ\215ƛ\276\064\234\244?g\347`?FG\256?Z\313K\277%\366ƾ\n\026V\277\344;\346\277Z\245\265?\245q\220>\220L\321?R\240;\276#\003\222?\231Vu\277"..., 
        data = 0x7ffff6cdce74
      }, 
      dims = 0xe8d990, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 2048, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce5f54 "MobilenetV1/MobilenetV1/Conv2d_10_depthwise/depthwise_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6cdd680, 
        u32 = 0x7ffff6cdd680, 
        i64 = 0x7ffff6cdd680, 
        u64 = 0x7ffff6cdd680, 
        f = 0x7ffff6cdd680, 
        f16 = 0x7ffff6cdd680, 
        f64 = 0x7ffff6cdd680, 
        raw = 0x7ffff6cdd680 "ߔ\230\277\320Y\024\277*\233\275\277\200\267\216>\304\063\215\276J\370\222\276\220\365X=2>\237\276*\327\024>\351\344\314>\206\223\237?\230\322S\277\247nӾTW\204?\204\340\t=\252\317\032@\322Ѻ\277\206f\306>C3f\277\244\224c>\"ߞ\276\240\271\232<D\314)?.\355'@\020\070\256\276\303q\020?\024*\206\277\030\222F=\"\206ſt\260\234\276\372(\331>\260\317%\300\240S\234>ի\002@\376\345\202?\375a\211\277z?m?C߆\277\030\302\355>\n玾~V\200\277ܙX@\362}!\300\065\305\022@TGf>f\220?>\230\317ݼ(}\343>\\\243\250\276\\\227\223?"..., 
        raw_const = 0x7ffff6cdd680 "ߔ\230\277\320Y\024\277*\233\275\277\200\267\216>\304\063\215\276J\370\222\276\220\365X=2>\237\276*\327\024>\351\344\314>\206\223\237?\230\322S\277\247nӾTW\204?\204\340\t=\252\317\032@\322Ѻ\277\206f\306>C3f\277\244\224c>\"ߞ\276\240\271\232<D\314)?.\355'@\020\070\256\276\303q\020?\024*\206\277\030\222F=\"\206ſt\260\234\276\372(\331>\260\317%\300\240S\234>ի\002@\376\345\202?\375a\211\277z?m?C߆\277\030\302\355>\n玾~V\200\277ܙX@\362}!\300\065\305\022@TGf>f\220?>\230\317ݼ(}\343>\\\243\250\276\\\227\223?"..., 
        uint8 = 0x7ffff6cdd680 "ߔ\230\277\320Y\024\277*\233\275\277\200\267\216>\304\063\215\276J\370\222\276\220\365X=2>\237\276*\327\024>\351\344\314>\206\223\237?\230\322S\277\247nӾTW\204?\204\340\t=\252\317\032@\322Ѻ\277\206f\306>C3f\277\244\224c>\"ߞ\276\240\271\232<D\314)?.\355'@\020\070\256\276\303q\020?\024*\206\277\030\222F=\"\206ſt\260\234\276\372(\331>\260\317%\300\240S\234>ի\002@\376\345\202?\375a\211\277z?m?C߆\277\030\302\355>\n玾~V\200\277ܙX@\362}!\300\065\305\022@TGf>f\220?>\230\317ݼ(}\343>\\\243\250\276\\\227\223?"..., 
        b = 0x7ffff6cdd680, 
        i16 = 0x7ffff6cdd680, 
        c64 = 0x7ffff6cdd680, 
        c128 = 0x7ffff6cdd680, 
        int8 = 0x7ffff6cdd680 "ߔ\230\277\320Y\024\277*\233\275\277\200\267\216>\304\063\215\276J\370\222\276\220\365X=2>\237\276*\327\024>\351\344\314>\206\223\237?\230\322S\277\247nӾTW\204?\204\340\t=\252\317\032@\322Ѻ\277\206f\306>C3f\277\244\224c>\"ߞ\276\240\271\232<D\314)?.\355'@\020\070\256\276\303q\020?\024*\206\277\030\222F=\"\206ſt\260\234\276\372(\331>\260\317%\300\240S\234>ի\002@\376\345\202?\375a\211\277z?m?C߆\277\030\302\355>\n玾~V\200\277ܙX@\362}!\300\065\305\022@TGf>f\220?>\230\317ݼ(}\343>\\\243\250\276\\\227\223?"..., 
        data = 0x7ffff6cdd680
      }, 
      dims = 0xe8d9b0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 2048, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce5fb4 "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/Conv2D_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8d950, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 401408, 
      allocation = 0x0, 
      name = 0x7ffff6ce57a4 "MobilenetV1/MobilenetV1/Conv2d_10_pointwise/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8d9f0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe93370, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 401408, 
      allocation = 0x0, 
      name = 0x7ffff6ce56f0 "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8da30
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6cdde8c, 
        u32 = 0x7ffff6cdde8c, 
        i64 = 0x7ffff6cdde8c, 
        u64 = 0x7ffff6cdde8c, 
        f = 0x7ffff6cdde8c, 
        f16 = 0x7ffff6cdde8c, 
        f64 = 0x7ffff6cdde8c, 
        raw = 0x7ffff6cdde8c "(\365>\275\266\016\362?\236A\004\277\355\356\377\276\237\205", <incomplete sequence \364\276>, 
        raw_const = 0x7ffff6cdde8c "(\365>\275\266\016\362?\236A\004\277\355\356\377\276\237\205", <incomplete sequence \364\276>, 
        uint8 = 0x7ffff6cdde8c "(\365>\275\266\016\362?\236A\004\277\355\356\377\276\237\205", <incomplete sequence \364\276>, 
        b = 0x7ffff6cdde8c, 
        i16 = 0x7ffff6cdde8c, 
        c64 = 0x7ffff6cdde8c, 
        c128 = 0x7ffff6cdde8c, 
        int8 = 0x7ffff6cdde8c "(\365>\275\266\016\362?\236A\004\277\355\356\377\276\237\205", <incomplete sequence \364\276>, 
        data = 0x7ffff6cdde8c
      }, 
      dims = 0xe8da50, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 2048, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce6010 "MobilenetV1/MobilenetV1/Conv2d_11_depthwise/depthwise_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6cde698, 
        u32 = 0x7ffff6cde698, 
        i64 = 0x7ffff6cde698, 
        u64 = 0x7ffff6cde698, 
        f = 0x7ffff6cde698, 
        f16 = 0x7ffff6cde698, 
        f64 = 0x7ffff6cde698, 
        raw = 0x7ffff6cde698 ")և\277F:U\300\250D\300\276\236\277j\277", 
        raw_const = 0x7ffff6cde698 ")և\277F:U\300\250D\300\276\236\277j\277", 
        uint8 = 0x7ffff6cde698 ")և\277F:U\300\250D\300\276\236\277j\277", 
        b = 0x7ffff6cde698, 
        i16 = 0x7ffff6cde698, 
        c64 = 0x7ffff6cde698, 
        c128 = 0x7ffff6cde698, 
        int8 = 0x7ffff6cde698 ")և\277F:U\300\250D\300\276\236\277j\277", 
        data = 0x7ffff6cde698
      }, 
      dims = 0xe8da70, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 2048, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce6070 "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Conv2D_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8da10, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 401408, 
      allocation = 0x0, 
      name = 0x7ffff6ce54c0 "MobilenetV1/MobilenetV1/Conv2d_11_pointwise/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8dab0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe93390, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 100352, 
      allocation = 0x0, 
      name = 0x7ffff6ce5808 "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8daf0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6cdeea4, 
        u32 = 0x7ffff6cdeea4, 
        i64 = 0x7ffff6cdeea4, 
        u64 = 0x7ffff6cdeea4, 
        f = 0x7ffff6cdeea4, 
        f16 = 0x7ffff6cdeea4, 
        f64 = 0x7ffff6cdeea4, 
        raw = 0x7ffff6cdeea4 "YZ\304?\200\366\066<Й\362\273\300\364\003\273@\025\367\273r\261\312>\340ۦ\273\030\244*\276\302g\223>\241Ra@\355K\223??m\270?\210ǩ<\200Ϗ\273\235%\032@\330\005\246> \261\355\273\321\374\354?\246\332\360?6\302\026@\004S\304>q\242\033@6\305O@\275\377\006\277P\260;<7\262'@\300\341m\273'\343\b@^\212\n@\300+\365\273\361\027\070@:\022\361\276h\365\036@\321! @", 
        raw_const = 0x7ffff6cdeea4 "YZ\304?\200\366\066<Й\362\273\300\364\003\273@\025\367\273r\261\312>\340ۦ\273\030\244*\276\302g\223>\241Ra@\355K\223??m\270?\210ǩ<\200Ϗ\273\235%\032@\330\005\246> \261\355\273\321\374\354?\246\332\360?6\302\026@\004S\304>q\242\033@6\305O@\275\377\006\277P\260;<7\262'@\300\341m\273'\343\b@^\212\n@\300+\365\273\361\027\070@:\022\361\276h\365\036@\321! @", 
        uint8 = 0x7ffff6cdeea4 "YZ\304?\200\366\066<Й\362\273\300\364\003\273@\025\367\273r\261\312>\340ۦ\273\030\244*\276\302g\223>\241Ra@\355K\223??m\270?\210ǩ<\200Ϗ\273\235%\032@\330\005\246> \261\355\273\321\374\354?\246\332\360?6\302\026@\004S\304>q\242\033@6\305O@\275\377\006\277P\260;<7\262'@\300\341m\273'\343\b@^\212\n@\300+\365\273\361\027\070@:\022\361\276h\365\036@\321! @", 
        b = 0x7ffff6cdeea4, 
        i16 = 0x7ffff6cdeea4, 
        c64 = 0x7ffff6cdeea4, 
        c128 = 0x7ffff6cdeea4, 
        int8 = 0x7ffff6cdeea4 "YZ\304?\200\366\066<Й\362\273\300\364\003\273@\025\367\273r\261\312>\340ۦ\273\030\244*\276\302g\223>\241Ra@\355K\223??m\270?\210ǩ<\200Ϗ\273\235%\032@\330\005\246> \261\355\273\321\374\354?\246\332\360?6\302\026@\004S\304>q\242\033@6\305O@\275\377\006\277P\260;<7\262'@\300\341m\273'\343\b@^\212\n@\300+\365\273\361\027\070@:\022\361\276h\365\036@\321! @", 
        data = 0x7ffff6cdeea4
      }, 
      dims = 0xe8db10, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 2048, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce60cc "MobilenetV1/MobilenetV1/Conv2d_12_depthwise/depthwise_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6cdf6b0, 
        u32 = 0x7ffff6cdf6b0, 
        i64 = 0x7ffff6cdf6b0, 
        u64 = 0x7ffff6cdf6b0, 
        f = 0x7ffff6cdf6b0, 
        f16 = 0x7ffff6cdf6b0, 
        f64 = 0x7ffff6cdf6b0, 
        raw = 0x7ffff6cdf6b0 "\362y\245\276$\352\037\300\064̈>\204f<>(\327*?'#ٿT\001\003\300\276*\342\277NK\367\277\331<@\277\314\355\217?\265\rܾP\241z=3fѾ\260\361\207\277;$\223>~.\037\300\307\036\252\277\264?+@PUv\275\331@\001\300\213\021\254\277(\337̽ܕ?>9\246\233\277tAҿW%\271\276\210v\213\276\003\037\t\277PoX=S\210*\300\201/m@\367l\022\277=\214\213\277b\263\062\277\334J\264\277\346[\034\300\304\304\336\276\227}\240\277\335\024\347\276&\230ӽ\333g\234\277\210\374\334>\252\024\036?^Xl\277\301rk?\370@\351\275\320CV\276\347\023\a@\330\346\n\276"..., 
        raw_const = 0x7ffff6cdf6b0 "\362y\245\276$\352\037\300\064̈>\204f<>(\327*?'#ٿT\001\003\300\276*\342\277NK\367\277\331<@\277\314\355\217?\265\rܾP\241z=3fѾ\260\361\207\277;$\223>~.\037\300\307\036\252\277\264?+@PUv\275\331@\001\300\213\021\254\277(\337̽ܕ?>9\246\233\277tAҿW%\271\276\210v\213\276\003\037\t\277PoX=S\210*\300\201/m@\367l\022\277=\214\213\277b\263\062\277\334J\264\277\346[\034\300\304\304\336\276\227}\240\277\335\024\347\276&\230ӽ\333g\234\277\210\374\334>\252\024\036?^Xl\277\301rk?\370@\351\275\320CV\276\347\023\a@\330\346\n\276"..., 
        uint8 = 0x7ffff6cdf6b0 "\362y\245\276$\352\037\300\064̈>\204f<>(\327*?'#ٿT\001\003\300\276*\342\277NK\367\277\331<@\277\314\355\217?\265\rܾP\241z=3fѾ\260\361\207\277;$\223>~.\037\300\307\036\252\277\264?+@PUv\275\331@\001\300\213\021\254\277(\337̽ܕ?>9\246\233\277tAҿW%\271\276\210v\213\276\003\037\t\277PoX=S\210*\300\201/m@\367l\022\277=\214\213\277b\263\062\277\334J\264\277\346[\034\300\304\304\336\276\227}\240\277\335\024\347\276&\230ӽ\333g\234\277\210\374\334>\252\024\036?^Xl\277\301rk?\370@\351\275\320CV\276\347\023\a@\330\346\n\276"..., 
        b = 0x7ffff6cdf6b0, 
        i16 = 0x7ffff6cdf6b0, 
        c64 = 0x7ffff6cdf6b0, 
        c128 = 0x7ffff6cdf6b0, 
        int8 = 0x7ffff6cdf6b0 "\362y\245\276$\352\037\300\064̈>\204f<>(\327*?'#ٿT\001\003\300\276*\342\277NK\367\277\331<@\277\314\355\217?\265\rܾP\241z=3fѾ\260\361\207\277;$\223>~.\037\300\307\036\252\277\264?+@PUv\275\331@\001\300\213\021\254\277(\337̽ܕ?>9\246\233\277tAҿW%\271\276\210v\213\276\003\037\t\277PoX=S\210*\300\201/m@\367l\022\277=\214\213\277b\263\062\277\334J\264\277\346[\034\300\304\304\336\276\227}\240\277\335\024\347\276&\230ӽ\333g\234\277\210\374\334>\252\024\036?^Xl\277\301rk?\370@\351\275\320CV\276\347\023\a@\330\346\n\276"..., 
        data = 0x7ffff6cdf6b0
      }, 
      dims = 0xe8db30, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 4096, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce612c "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/Conv2D_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8dad0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 200704, 
      allocation = 0x0, 
      name = 0x7ffff6ce58c4 "MobilenetV1/MobilenetV1/Conv2d_12_pointwise/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8db70
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe933b0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 200704, 
      allocation = 0x0, 
      name = 0x7ffff6ce5928 "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8dbb0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6ce06bc, 
        u32 = 0x7ffff6ce06bc, 
        i64 = 0x7ffff6ce06bc, 
        u64 = 0x7ffff6ce06bc, 
        f = 0x7ffff6ce06bc, 
        f16 = 0x7ffff6ce06bc, 
        f64 = 0x7ffff6ce06bc, 
        raw = 0x7ffff6ce06bc "\370\261\342<XV\276<\230T\226\274\200\f?\274x_\325<0V\346<pZ\005=\030:\354\276\022\067\236?%\350\250?\002\373\254?DSi\275de\017=\240.A\274pg\202\277\364\240\335?\200\300\\\275", 
        raw_const = 0x7ffff6ce06bc "\370\261\342<XV\276<\230T\226\274\200\f?\274x_\325<0V\346<pZ\005=\030:\354\276\022\067\236?%\350\250?\002\373\254?DSi\275de\017=\240.A\274pg\202\277\364\240\335?\200\300\\\275", 
        uint8 = 0x7ffff6ce06bc "\370\261\342<XV\276<\230T\226\274\200\f?\274x_\325<0V\346<pZ\005=\030:\354\276\022\067\236?%\350\250?\002\373\254?DSi\275de\017=\240.A\274pg\202\277\364\240\335?\200\300\\\275", 
        b = 0x7ffff6ce06bc, 
        i16 = 0x7ffff6ce06bc, 
        c64 = 0x7ffff6ce06bc, 
        c128 = 0x7ffff6ce06bc, 
        int8 = 0x7ffff6ce06bc "\370\261\342<XV\276<\230T\226\274\200\f?\274x_\325<0V\346<pZ\005=\030:\354\276\022\067\236?%\350\250?\002\373\254?DSi\275de\017=\240.A\274pg\202\277\364\240\335?\200\300\\\275", 
        data = 0x7ffff6ce06bc
      }, 
      dims = 0xe8dbd0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 4096, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce6188 "MobilenetV1/MobilenetV1/Conv2d_13_depthwise/depthwise_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6ce16c8, 
        u32 = 0x7ffff6ce16c8, 
        i64 = 0x7ffff6ce16c8, 
        u64 = 0x7ffff6ce16c8, 
        f = 0x7ffff6ce16c8, 
        f16 = 0x7ffff6ce16c8, 
        f64 = 0x7ffff6ce16c8, 
        raw = 0x7ffff6ce16c8 "t\201\213?\226\241\304@uȏ@\224\221\220?\030v\214\276\003\271\371@d'\222@`O\022@l\214\335?.N\024@\201#\226@\206\255\247?\300\354\247@x\367\266@\237\003\253\277\300\020h\276*\311K@\210zK\277", 
        raw_const = 0x7ffff6ce16c8 "t\201\213?\226\241\304@uȏ@\224\221\220?\030v\214\276\003\271\371@d'\222@`O\022@l\214\335?.N\024@\201#\226@\206\255\247?\300\354\247@x\367\266@\237\003\253\277\300\020h\276*\311K@\210zK\277", 
        uint8 = 0x7ffff6ce16c8 "t\201\213?\226\241\304@uȏ@\224\221\220?\030v\214\276\003\271\371@d'\222@`O\022@l\214\335?.N\024@\201#\226@\206\255\247?\300\354\247@x\367\266@\237\003\253\277\300\020h\276*\311K@\210zK\277", 
        b = 0x7ffff6ce16c8, 
        i16 = 0x7ffff6ce16c8, 
        c64 = 0x7ffff6ce16c8, 
        c128 = 0x7ffff6ce16c8, 
        int8 = 0x7ffff6ce16c8 "t\201\213?\226\241\304@uȏ@\224\221\220?\030v\214\276\003\271\371@d'\222@`O\022@l\214\335?.N\024@\201#\226@\206\255\247?\300\354\247@x\367\266@\237\003\253\277\300\020h\276*\311K@\210zK\277", 
        data = 0x7ffff6ce16c8
      }, 
      dims = 0xe8dbf0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 4096, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce61e8 "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Conv2D_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8db90, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 200704, 
      allocation = 0x0, 
      name = 0x7ffff6ce598c "MobilenetV1/MobilenetV1/Conv2d_13_pointwise/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8dc30
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe91600, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 1605632, 
      allocation = 0x0, 
      name = 0x7ffff6ce4e74 "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8dc70
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff62e831c, 
        u32 = 0x7ffff62e831c, 
        i64 = 0x7ffff62e831c, 
        u64 = 0x7ffff62e831c, 
        f = 0x7ffff62e831c, 
        f16 = 0x7ffff62e831c, 
        f64 = 0x7ffff62e831c, 
        raw = 0x7ffff62e831c "v畿\346#\004?\346\325\a?,\310ؾ^\276\324?\025\366r?\244\356\200>\023)%\300?CZ\277\234*I\277\035\003v\277^2\206@vZ%@\362\067\n\277\347\301k\276\374@\r@B\204j=J\352\277@u\355T?\022\024\357>6LF\277\206ϕ@\210h\200\277\226&\324?\264!E>\342\070\360?\vZ\327@\274\315h\277FD3@`\212\033?\033is\277\376^\211@\f!`\377*L`\377\004", 
        raw_const = 0x7ffff62e831c "v畿\346#\004?\346\325\a?,\310ؾ^\276\324?\025\366r?\244\356\200>\023)%\300?CZ\277\234*I\277\035\003v\277^2\206@vZ%@\362\067\n\277\347\301k\276\374@\r@B\204j=J\352\277@u\355T?\022\024\357>6LF\277\206ϕ@\210h\200\277\226&\324?\264!E>\342\070\360?\vZ\327@\274\315h\277FD3@`\212\033?\033is\277\376^\211@\f!`\377*L`\377\004", 
        uint8 = 0x7ffff62e831c "v畿\346#\004?\346\325\a?,\310ؾ^\276\324?\025\366r?\244\356\200>\023)%\300?CZ\277\234*I\277\035\003v\277^2\206@vZ%@\362\067\n\277\347\301k\276\374@\r@B\204j=J\352\277@u\355T?\022\024\357>6LF\277\206ϕ@\210h\200\277\226&\324?\264!E>\342\070\360?\vZ\327@\274\315h\277FD3@`\212\033?\033is\277\376^\211@\f!`\377*L`\377\004", 
        b = 0x7ffff62e831c, 
        i16 = 0x7ffff62e831c, 
        c64 = 0x7ffff62e831c, 
        c128 = 0x7ffff62e831c, 
        int8 = 0x7ffff62e831c "v畿\346#\004?\346\325\a?,\310ؾ^\276\324?\025\366r?\244\356\200>\023)%\300?CZ\277\234*I\277\035\003v\277^2\206@vZ%@\362\067\n\277\347\301k\276\374@\r@B\204j=J\352\277@u\355T?\022\024\357>6LF\277\206ϕ@\210h\200\277\226&\324?\264!E>\342\070\360?\vZ\327@\274\315h\277FD3@`\212\033?\033is\277\376^\211@\f!`\377*L`\377\004", 
        data = 0x7ffff62e831c
      }, 
      dims = 0xe8dc90, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 128, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce47ac "MobilenetV1/MobilenetV1/Conv2d_1_depthwise/depthwise_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff5ce81d8, 
        u32 = 0x7ffff5ce81d8, 
        i64 = 0x7ffff5ce81d8, 
        u64 = 0x7ffff5ce81d8, 
        f = 0x7ffff5ce81d8, 
        f16 = 0x7ffff5ce81d8, 
        f64 = 0x7ffff5ce81d8, 
        raw = 0x7ffff5ce81d8 "\245\214\365?\344P\263\277\060ƭ@\210\034o?\360\365P=tm\261\300\250\247\340?]\340\304\300\320T\350@$\373[@\246\066U>D]\272>\370B;\300\070|\275\300\247\337\301\300\066UZ\277r\250\065@0j\211@\037Gu?\354\311\065\277c\324\003\301\022\270A\277\240`\033?t\226~A\357\350\023@\033\223\317\300\316I\220As0\217@\022`AA@\244Z@\236\066)@\nk&\300\275f\350@\260=C\301.T\365\275z\224\v?`\024\252\300}¿\277\373\274\211@\222\024\244\277Q \202@\027|\202\275l\310\v@\350\325\356>=6\266\277-c\244@\b\354{\300\300\016\035?\016\275H\277\345\240.\300"..., 
        raw_const = 0x7ffff5ce81d8 "\245\214\365?\344P\263\277\060ƭ@\210\034o?\360\365P=tm\261\300\250\247\340?]\340\304\300\320T\350@$\373[@\246\066U>D]\272>\370B;\300\070|\275\300\247\337\301\300\066UZ\277r\250\065@0j\211@\037Gu?\354\311\065\277c\324\003\301\022\270A\277\240`\033?t\226~A\357\350\023@\033\223\317\300\316I\220As0\217@\022`AA@\244Z@\236\066)@\nk&\300\275f\350@\260=C\301.T\365\275z\224\v?`\024\252\300}¿\277\373\274\211@\222\024\244\277Q \202@\027|\202\275l\310\v@\350\325\356>=6\266\277-c\244@\b\354{\300\300\016\035?\016\275H\277\345\240.\300"..., 
        uint8 = 0x7ffff5ce81d8 "\245\214\365?\344P\263\277\060ƭ@\210\034o?\360\365P=tm\261\300\250\247\340?]\340\304\300\320T\350@$\373[@\246\066U>D]\272>\370B;\300\070|\275\300\247\337\301\300\066UZ\277r\250\065@0j\211@\037Gu?\354\311\065\277c\324\003\301\022\270A\277\240`\033?t\226~A\357\350\023@\033\223\317\300\316I\220As0\217@\022`AA@\244Z@\236\066)@\nk&\300\275f\350@\260=C\301.T\365\275z\224\v?`\024\252\300}¿\277\373\274\211@\222\024\244\277Q \202@\027|\202\275l\310\v@\350\325\356>=6\266\277-c\244@\b\354{\300\300\016\035?\016\275H\277\345\240.\300"..., 
        b = 0x7ffff5ce81d8, 
        i16 = 0x7ffff5ce81d8, 
        c64 = 0x7ffff5ce81d8, 
        c128 = 0x7ffff5ce81d8, 
        int8 = 0x7ffff5ce81d8 "\245\214\365?\344P\263\277\060ƭ@\210\034o?\360\365P=tm\261\300\250\247\340?]\340\304\300\320T\350@$\373[@\246\066U>D]\272>\370B;\300\070|\275\300\247\337\301\300\066UZ\277r\250\065@0j\211@\037Gu?\354\311\065\277c\324\003\301\022\270A\277\240`\033?t\226~A\357\350\023@\033\223\317\300\316I\220As0\217@\022`AA@\244Z@\236\066)@\nk&\300\275f\350@\260=C\301.T\365\275z\224\v?`\024\252\300}¿\277\373\274\211@\222\024\244\277Q \202@\027|\202\275l\310\v@\350\325\356>=6\266\277-c\244@\b\354{\300\300\016\035?\016\275H\277\345\240.\300"..., 
        data = 0x7ffff5ce81d8
      }, 
      dims = 0xe8dcb0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 256, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce4380 "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/Conv2D_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8dc50, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 3211264, 
      allocation = 0x0, 
      name = 0x7ffff6ce5110 "MobilenetV1/MobilenetV1/Conv2d_1_pointwise/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8dcf0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe91620, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 802816, 
      allocation = 0x0, 
      name = 0x7ffff6ce480c "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8dd30
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff66a8040, 
        u32 = 0x7ffff66a8040, 
        i64 = 0x7ffff66a8040, 
        u64 = 0x7ffff66a8040, 
        f = 0x7ffff66a8040, 
        f16 = 0x7ffff66a8040, 
        f64 = 0x7ffff66a8040, 
        raw = 0x7ffff66a8040 "`\227\365? \354B=\376\346L?p\377\220?\311\376\241?\276a\341?\332\315\065?\260\355B=̬\234?͔\227@{o!?\320$9@\276@\211>B\243\027@\210^\300=|%\035>\034\256\221?\371Z\207?\300\225\035<\215\267 \277\"/\271?H\246\224?\200S]\275\364\355\003@\244\220i>`\341\230<\246د=*\342\274@\256\205\n@ѽY@", 
        raw_const = 0x7ffff66a8040 "`\227\365? \354B=\376\346L?p\377\220?\311\376\241?\276a\341?\332\315\065?\260\355B=̬\234?͔\227@{o!?\320$9@\276@\211>B\243\027@\210^\300=|%\035>\034\256\221?\371Z\207?\300\225\035<\215\267 \277\"/\271?H\246\224?\200S]\275\364\355\003@\244\220i>`\341\230<\246د=*\342\274@\256\205\n@ѽY@", 
        uint8 = 0x7ffff66a8040 "`\227\365? \354B=\376\346L?p\377\220?\311\376\241?\276a\341?\332\315\065?\260\355B=̬\234?͔\227@{o!?\320$9@\276@\211>B\243\027@\210^\300=|%\035>\034\256\221?\371Z\207?\300\225\035<\215\267 \277\"/\271?H\246\224?\200S]\275\364\355\003@\244\220i>`\341\230<\246د=*\342\274@\256\205\n@ѽY@", 
        b = 0x7ffff66a8040, 
        i16 = 0x7ffff66a8040, 
        c64 = 0x7ffff66a8040, 
        c128 = 0x7ffff66a8040, 
        int8 = 0x7ffff66a8040 "`\227\365? \354B=\376\346L?p\377\220?\311\376\241?\276a\341?\332\315\065?\260\355B=̬\234?͔\227@{o!?\320$9@\276@\211>B\243\027@\210^\300=|%\035>\034\256\221?\371Z\207?\300\225\035<\215\267 \277\"/\271?H\246\224?\200S]\275\364\355\003@\244\220i>`\341\230<\246د=*\342\274@\256\205\n@ѽY@", 
        data = 0x7ffff66a8040
      }, 
      dims = 0xe8dd50, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 256, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce5358 "MobilenetV1/MobilenetV1/Conv2d_2_depthwise/depthwise_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6514f50, 
        u32 = 0x7ffff6514f50, 
        i64 = 0x7ffff6514f50, 
        u64 = 0x7ffff6514f50, 
        f = 0x7ffff6514f50, 
        f16 = 0x7ffff6514f50, 
        f64 = 0x7ffff6514f50, 
        raw = 0x7ffff6514f50 "\226\376)@a\234\t\300xC)\300\257^\374>S\355V\300\063\260\310?\340\247Ӿ6\214T@\372\235\020\301\365\064\221@&\262\322?2\\\275\277\306\004\020\300\264~\345>\337|\273?gp\f@\334T\245@\t\355\002@\223\373*@<\032\231\276K\254{\277M\032`\300", 
        raw_const = 0x7ffff6514f50 "\226\376)@a\234\t\300xC)\300\257^\374>S\355V\300\063\260\310?\340\247Ӿ6\214T@\372\235\020\301\365\064\221@&\262\322?2\\\275\277\306\004\020\300\264~\345>\337|\273?gp\f@\334T\245@\t\355\002@\223\373*@<\032\231\276K\254{\277M\032`\300", 
        uint8 = 0x7ffff6514f50 "\226\376)@a\234\t\300xC)\300\257^\374>S\355V\300\063\260\310?\340\247Ӿ6\214T@\372\235\020\301\365\064\221@&\262\322?2\\\275\277\306\004\020\300\264~\345>\337|\273?gp\f@\334T\245@\t\355\002@\223\373*@<\032\231\276K\254{\277M\032`\300", 
        b = 0x7ffff6514f50, 
        i16 = 0x7ffff6514f50, 
        c64 = 0x7ffff6514f50, 
        c128 = 0x7ffff6514f50, 
        int8 = 0x7ffff6514f50 "\226\376)@a\234\t\300xC)\300\257^\374>S\355V\300\063\260\310?\340\247Ӿ6\214T@\372\235\020\301\365\064\221@&\262\322?2\\\275\277\306\004\020\300\264~\345>\337|\273?gp\f@\334T\245@\t\355\002@\223\373*@<\032\231\276K\254{\277M\032`\300", 
        data = 0x7ffff6514f50
      }, 
      dims = 0xe8dd70, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 512, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce4fa0 "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/Conv2D_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8dd10, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 1605632, 
      allocation = 0x0, 
      name = 0x7ffff6ce48d4 "MobilenetV1/MobilenetV1/Conv2d_2_pointwise/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8ddb0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe91640, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 1605632, 
      allocation = 0x0, 
      name = 0x7ffff6ce46f0 "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8ddf0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6cd93f0, 
        u32 = 0x7ffff6cd93f0, 
        i64 = 0x7ffff6cd93f0, 
        u64 = 0x7ffff6cd93f0, 
        f = 0x7ffff6cd93f0, 
        f16 = 0x7ffff6cd93f0, 
        f64 = 0x7ffff6cd93f0, 
        raw = 0x7ffff6cd93f0 "P\353\214?WB\026@\274m\373\276\210S\212\276\003\226\v?\300Ώ?:\346s?\035\354\216?r", 
        raw_const = 0x7ffff6cd93f0 "P\353\214?WB\026@\274m\373\276\210S\212\276\003\226\v?\300Ώ?:\346s?\035\354\216?r", 
        uint8 = 0x7ffff6cd93f0 "P\353\214?WB\026@\274m\373\276\210S\212\276\003\226\v?\300Ώ?:\346s?\035\354\216?r", 
        b = 0x7ffff6cd93f0, 
        i16 = 0x7ffff6cd93f0, 
        c64 = 0x7ffff6cd93f0, 
        c128 = 0x7ffff6cd93f0, 
        int8 = 0x7ffff6cd93f0 "P\353\214?WB\026@\274m\373\276\210S\212\276\003\226\v?\300Ώ?:\346s?\035\354\216?r", 
        data = 0x7ffff6cd93f0
      }, 
      dims = 0xe8de10, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 512, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce5b48 "MobilenetV1/MobilenetV1/Conv2d_3_depthwise/depthwise_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6cd95fc, 
        u32 = 0x7ffff6cd95fc, 
        i64 = 0x7ffff6cd95fc, 
        u64 = 0x7ffff6cd95fc, 
        f = 0x7ffff6cd95fc, 
        f16 = 0x7ffff6cd95fc, 
        f64 = 0x7ffff6cd95fc, 
        raw = 0x7ffff6cd95fc "f0\270\277Y#\300\277\071\230%\300Dtʿ\342\005\235\276?C#?8\237\n@}-O\277\243W}?ԡ\212?\372\063)@T\024\372?\227\260J\277\264\242\260?\034S\037@n\270,\300\261\343Ϳ\351\227*@\227\367\342?\264\070\261\277", 
        raw_const = 0x7ffff6cd95fc "f0\270\277Y#\300\277\071\230%\300Dtʿ\342\005\235\276?C#?8\237\n@}-O\277\243W}?ԡ\212?\372\063)@T\024\372?\227\260J\277\264\242\260?\034S\037@n\270,\300\261\343Ϳ\351\227*@\227\367\342?\264\070\261\277", 
        uint8 = 0x7ffff6cd95fc "f0\270\277Y#\300\277\071\230%\300Dtʿ\342\005\235\276?C#?8\237\n@}-O\277\243W}?ԡ\212?\372\063)@T\024\372?\227\260J\277\264\242\260?\034S\037@n\270,\300\261\343Ϳ\351\227*@\227\367\342?\264\070\261\277", 
        b = 0x7ffff6cd95fc, 
        i16 = 0x7ffff6cd95fc, 
        c64 = 0x7ffff6cd95fc, 
        c128 = 0x7ffff6cd95fc, 
        int8 = 0x7ffff6cd95fc "f0\270\277Y#\300\277\071\230%\300Dtʿ\342\005\235\276?C#?8\237\n@}-O\277\243W}?ԡ\212?\372\063)@T\024\372?\227\260J\277\264\242\260?\034S\037@n\270,\300\261\343Ϳ\351\227*@\227\367\342?\264\070\261\277", 
        data = 0x7ffff6cd95fc
      }, 
      dims = 0xe8de30, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 512, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce5ba8 "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/Conv2D_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8ddd0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 1605632, 
      allocation = 0x0, 
      name = 0x7ffff6ce4560 "MobilenetV1/MobilenetV1/Conv2d_3_pointwise/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8de70
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe91660, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 401408, 
      allocation = 0x0, 
      name = 0x7ffff6ce45c4 "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8deb0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6cd9808, 
        u32 = 0x7ffff6cd9808, 
        i64 = 0x7ffff6cd9808, 
        u64 = 0x7ffff6cd9808, 
        f = 0x7ffff6cd9808, 
        f16 = 0x7ffff6cd9808, 
        f64 = 0x7ffff6cd9808, 
        raw = 0x7ffff6cd9808 "\020\270?=LTV>\260\231\001@\316C\032@\200\373\v@\340\312^=9\233\023@\360\247\026=\211Es@\344\312\f\277\060\"u=)-\216@\n/\342?\020\317\025\275\377\372\212@\236\236 >\251\207\342?l\306T@", 
        raw_const = 0x7ffff6cd9808 "\020\270?=LTV>\260\231\001@\316C\032@\200\373\v@\340\312^=9\233\023@\360\247\026=\211Es@\344\312\f\277\060\"u=)-\216@\n/\342?\020\317\025\275\377\372\212@\236\236 >\251\207\342?l\306T@", 
        uint8 = 0x7ffff6cd9808 "\020\270?=LTV>\260\231\001@\316C\032@\200\373\v@\340\312^=9\233\023@\360\247\026=\211Es@\344\312\f\277\060\"u=)-\216@\n/\342?\020\317\025\275\377\372\212@\236\236 >\251\207\342?l\306T@", 
        b = 0x7ffff6cd9808, 
        i16 = 0x7ffff6cd9808, 
        c64 = 0x7ffff6cd9808, 
        c128 = 0x7ffff6cd9808, 
        int8 = 0x7ffff6cd9808 "\020\270?=LTV>\260\231\001@\316C\032@\200\373\v@\340\312^=9\233\023@\360\247\026=\211Es@\344\312\f\277\060\"u=)-\216@\n/\342?\020\317\025\275\377\372\212@\236\236 >\251\207\342?l\306T@", 
        data = 0x7ffff6cd9808
      }, 
      dims = 0xe8ded0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 512, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce5c04 "MobilenetV1/MobilenetV1/Conv2d_4_depthwise/depthwise_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6cd9a14, 
        u32 = 0x7ffff6cd9a14, 
        i64 = 0x7ffff6cd9a14, 
        u64 = 0x7ffff6cd9a14, 
        f = 0x7ffff6cd9a14, 
        f16 = 0x7ffff6cd9a14, 
        f64 = 0x7ffff6cd9a14, 
        raw = 0x7ffff6cd9a14 "9P\021\277\203\363\310?^\351n@i\273\344\277\336\a\341?\201K\"\277\377\336\030@4\005/?}h-?<1\375\276\256=\233\277\a\270\217\277\260\204\230\275\316\357\321?\256\316\332?\236\273p?\260\213\276\276", 
        raw_const = 0x7ffff6cd9a14 "9P\021\277\203\363\310?^\351n@i\273\344\277\336\a\341?\201K\"\277\377\336\030@4\005/?}h-?<1\375\276\256=\233\277\a\270\217\277\260\204\230\275\316\357\321?\256\316\332?\236\273p?\260\213\276\276", 
        uint8 = 0x7ffff6cd9a14 "9P\021\277\203\363\310?^\351n@i\273\344\277\336\a\341?\201K\"\277\377\336\030@4\005/?}h-?<1\375\276\256=\233\277\a\270\217\277\260\204\230\275\316\357\321?\256\316\332?\236\273p?\260\213\276\276", 
        b = 0x7ffff6cd9a14, 
        i16 = 0x7ffff6cd9a14, 
        c64 = 0x7ffff6cd9a14, 
        c128 = 0x7ffff6cd9a14, 
        int8 = 0x7ffff6cd9a14 "9P\021\277\203\363\310?^\351n@i\273\344\277\336\a\341?\201K\"\277\377\336\030@4\005/?}h-?<1\375\276\256=\233\277\a\270\217\277\260\204\230\275\316\357\321?\256\316\332?\236\273p?\260\213\276\276", 
        data = 0x7ffff6cd9a14
      }, 
      dims = 0xe8def0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 1024, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce5c64 "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/Conv2D_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8de90, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 802816, 
      allocation = 0x0, 
      name = 0x7ffff6ce4db8 "MobilenetV1/MobilenetV1/Conv2d_4_pointwise/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8df30
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe91680, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 802816, 
      allocation = 0x0, 
      name = 0x7ffff6ce4a58 "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8df70
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6cd9e20, 
        u32 = 0x7ffff6cd9e20, 
        i64 = 0x7ffff6cd9e20, 
        u64 = 0x7ffff6cd9e20, 
        f = 0x7ffff6cd9e20, 
        f16 = 0x7ffff6cd9e20, 
        f64 = 0x7ffff6cd9e20, 
        raw = 0x7ffff6cd9e20 "", 
        raw_const = 0x7ffff6cd9e20 "", 
        uint8 = 0x7ffff6cd9e20 "", 
        b = 0x7ffff6cd9e20, 
        i16 = 0x7ffff6cd9e20, 
        c64 = 0x7ffff6cd9e20, 
        c128 = 0x7ffff6cd9e20, 
        int8 = 0x7ffff6cd9e20 "", 
        data = 0x7ffff6cd9e20
      }, 
      dims = 0xe8df90, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 1024, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce5cc0 "MobilenetV1/MobilenetV1/Conv2d_5_depthwise/depthwise_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6cd8f50, 
        u32 = 0x7ffff6cd8f50, 
        i64 = 0x7ffff6cd8f50, 
        u64 = 0x7ffff6cd8f50, 
        f = 0x7ffff6cd8f50, 
        f16 = 0x7ffff6cd8f50, 
        f64 = 0x7ffff6cd8f50, 
        raw = 0x7ffff6cd8f50 "MG\241?f\337\273\276\\%佖r\225?㭊?\372\026\235?gJ|?D\267\304?YU\223?\001'\356\276$\240\345>s\177\343\277\372A\241?\274ǳ?\az\270?", 
        raw_const = 0x7ffff6cd8f50 "MG\241?f\337\273\276\\%佖r\225?㭊?\372\026\235?gJ|?D\267\304?YU\223?\001'\356\276$\240\345>s\177\343\277\372A\241?\274ǳ?\az\270?", 
        uint8 = 0x7ffff6cd8f50 "MG\241?f\337\273\276\\%佖r\225?㭊?\372\026\235?gJ|?D\267\304?YU\223?\001'\356\276$\240\345>s\177\343\277\372A\241?\274ǳ?\az\270?", 
        b = 0x7ffff6cd8f50, 
        i16 = 0x7ffff6cd8f50, 
        c64 = 0x7ffff6cd8f50, 
        c128 = 0x7ffff6cd8f50, 
        int8 = 0x7ffff6cd8f50 "MG\241?f\337\273\276\\%佖r\225?㭊?\372\026\235?gJ|?D\267\304?YU\223?\001'\356\276$\240\345>s\177\343\277\372A\241?\274ǳ?\az\270?", 
        data = 0x7ffff6cd8f50
      }, 
      dims = 0xe8dfb0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 1024, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce59f0 "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/Conv2D_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8df50, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 802816, 
      allocation = 0x0, 
      name = 0x7ffff6ce4440 "MobilenetV1/MobilenetV1/Conv2d_5_pointwise/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8dff0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe932d0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 200704, 
      allocation = 0x0, 
      name = 0x7ffff6ce43dc "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8e030
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6cda22c, 
        u32 = 0x7ffff6cda22c, 
        i64 = 0x7ffff6cda22c, 
        u64 = 0x7ffff6cda22c, 
        f = 0x7ffff6cda22c, 
        f16 = 0x7ffff6cda22c, 
        f64 = 0x7ffff6cda22c, 
        raw = 0x7ffff6cda22c "\324\335\033?\254\210\017@n\230'\276F*", 
        raw_const = 0x7ffff6cda22c "\324\335\033?\254\210\017@n\230'\276F*", 
        uint8 = 0x7ffff6cda22c "\324\335\033?\254\210\017@n\230'\276F*", 
        b = 0x7ffff6cda22c, 
        i16 = 0x7ffff6cda22c, 
        c64 = 0x7ffff6cda22c, 
        c128 = 0x7ffff6cda22c, 
        int8 = 0x7ffff6cda22c "\324\335\033?\254\210\017@n\230'\276F*", 
        data = 0x7ffff6cda22c
      }, 
      dims = 0xe8e050, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 1024, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce5d20 "MobilenetV1/MobilenetV1/Conv2d_6_depthwise/depthwise_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6cda638, 
        u32 = 0x7ffff6cda638, 
        i64 = 0x7ffff6cda638, 
        u64 = 0x7ffff6cda638, 
        f = 0x7ffff6cda638, 
        f16 = 0x7ffff6cda638, 
        f64 = 0x7ffff6cda638, 
        raw = 0x7ffff6cda638 "qĭ@i\351_\276\"\213\063@\\\311;?\\\270\271>:\f\360>\230\061\316?\aVs?\317\001\311?\316pſ\236N¾\270\213{?\275\020\225?\314\303\t@<E\216?\036\030\213?\024[\001>v\315\371?\233M\363?\260:m?", 
        raw_const = 0x7ffff6cda638 "qĭ@i\351_\276\"\213\063@\\\311;?\\\270\271>:\f\360>\230\061\316?\aVs?\317\001\311?\316pſ\236N¾\270\213{?\275\020\225?\314\303\t@<E\216?\036\030\213?\024[\001>v\315\371?\233M\363?\260:m?", 
        uint8 = 0x7ffff6cda638 "qĭ@i\351_\276\"\213\063@\\\311;?\\\270\271>:\f\360>\230\061\316?\aVs?\317\001\311?\316pſ\236N¾\270\213{?\275\020\225?\314\303\t@<E\216?\036\030\213?\024[\001>v\315\371?\233M\363?\260:m?", 
        b = 0x7ffff6cda638, 
        i16 = 0x7ffff6cda638, 
        c64 = 0x7ffff6cda638, 
        c128 = 0x7ffff6cda638, 
        int8 = 0x7ffff6cda638 "qĭ@i\351_\276\"\213\063@\\\311;?\\\270\271>:\f\360>\230\061\316?\aVs?\317\001\311?\316pſ\236N¾\270\213{?\275\020\225?\314\303\t@<E\216?\036\030\213?\024[\001>v\315\371?\233M\363?\260:m?", 
        data = 0x7ffff6cda638
      }, 
      dims = 0xe8e070, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 2048, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce5d80 "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/Conv2D_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8e010, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 401408, 
      allocation = 0x0, 
      name = 0x7ffff6ce468c "MobilenetV1/MobilenetV1/Conv2d_6_pointwise/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8e0b0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe932f0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 401408, 
      allocation = 0x0, 
      name = 0x7ffff6ce49f4 "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8e0f0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6cdae44, 
        u32 = 0x7ffff6cdae44, 
        i64 = 0x7ffff6cdae44, 
        u64 = 0x7ffff6cdae44, 
        f = 0x7ffff6cdae44, 
        f16 = 0x7ffff6cdae44, 
        f64 = 0x7ffff6cdae44, 
        raw = 0x7ffff6cdae44 "L\346\222?4\372\204?\001C2\277\377\322\306?\226\202\003>V\253\002\276\061\276ؾ\250s\232\277\060\060>@x\341\036=\200\372'<\244_\210?\337\314\004?\347r\204@\347\244-\300\062P\341?\304j\003\300TY.>X\316/\275p&\221@\002\030\367?\256\216\264?\240\266\210?\254\243\241?\315n\250?\006{\021?\215.\256\275\023\346\254?JC\210\277\273\356\244?Hc\227\273\337a\320?\263k\205?\352\030\276\277p\234\356\276q\305\353\276_\266k@\231\016\222?\t0F\277Z\342\231?\200Q\246?\034ˮ=>\005\204@\370\355\224>\374\210\324?h\265\272\277\346!/?h\025\231<\205\277\320>֜\236\276"..., 
        raw_const = 0x7ffff6cdae44 "L\346\222?4\372\204?\001C2\277\377\322\306?\226\202\003>V\253\002\276\061\276ؾ\250s\232\277\060\060>@x\341\036=\200\372'<\244_\210?\337\314\004?\347r\204@\347\244-\300\062P\341?\304j\003\300TY.>X\316/\275p&\221@\002\030\367?\256\216\264?\240\266\210?\254\243\241?\315n\250?\006{\021?\215.\256\275\023\346\254?JC\210\277\273\356\244?Hc\227\273\337a\320?\263k\205?\352\030\276\277p\234\356\276q\305\353\276_\266k@\231\016\222?\t0F\277Z\342\231?\200Q\246?\034ˮ=>\005\204@\370\355\224>\374\210\324?h\265\272\277\346!/?h\025\231<\205\277\320>֜\236\276"..., 
        uint8 = 0x7ffff6cdae44 "L\346\222?4\372\204?\001C2\277\377\322\306?\226\202\003>V\253\002\276\061\276ؾ\250s\232\277\060\060>@x\341\036=\200\372'<\244_\210?\337\314\004?\347r\204@\347\244-\300\062P\341?\304j\003\300TY.>X\316/\275p&\221@\002\030\367?\256\216\264?\240\266\210?\254\243\241?\315n\250?\006{\021?\215.\256\275\023\346\254?JC\210\277\273\356\244?Hc\227\273\337a\320?\263k\205?\352\030\276\277p\234\356\276q\305\353\276_\266k@\231\016\222?\t0F\277Z\342\231?\200Q\246?\034ˮ=>\005\204@\370\355\224>\374\210\324?h\265\272\277\346!/?h\025\231<\205\277\320>֜\236\276"..., 
        b = 0x7ffff6cdae44, 
        i16 = 0x7ffff6cdae44, 
        c64 = 0x7ffff6cdae44, 
        c128 = 0x7ffff6cdae44, 
        int8 = 0x7ffff6cdae44 "L\346\222?4\372\204?\001C2\277\377\322\306?\226\202\003>V\253\002\276\061\276ؾ\250s\232\277\060\060>@x\341\036=\200\372'<\244_\210?\337\314\004?\347r\204@\347\244-\300\062P\341?\304j\003\300TY.>X\316/\275p&\221@\002\030\367?\256\216\264?\240\266\210?\254\243\241?\315n\250?\006{\021?\215.\256\275\023\346\254?JC\210\277\273\356\244?Hc\227\273\337a\320?\263k\205?\352\030\276\277p\234\356\276q\305\353\276_\266k@\231\016\222?\t0F\277Z\342\231?\200Q\246?\034ˮ=>\005\204@\370\355\224>\374\210\324?h\265\272\277\346!/?h\025\231<\205\277\320>֜\236\276"..., 
        data = 0x7ffff6cdae44
      }, 
      dims = 0xe8e110, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 2048, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce5ddc "MobilenetV1/MobilenetV1/Conv2d_7_depthwise/depthwise_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6cdb650, 
        u32 = 0x7ffff6cdb650, 
        i64 = 0x7ffff6cdb650, 
        u64 = 0x7ffff6cdb650, 
        f = 0x7ffff6cdb650, 
        f16 = 0x7ffff6cdb650, 
        f64 = 0x7ffff6cdb650, 
        raw = 0x7ffff6cdb650 "]\222\270\276\062\066\201?61\276?ĵ1?\357!T?^ɤ?\030\254\360?.U\210?\225R\251\276\216L\202\277\245\377\006?`\222\037>\352\357\276>F\267\221\277\274]C>\372\243־\n\343\201?J\a\340?yʱ?\262f\345?\342W\r?xI\027?\370½>\361O\002\277\220%\313=l\322i\276\207S\214?)\260\272?s\f\235>\\\275+\277@?\336<\275\255\374\276D%\274?\362\231\221?\036\003\315?\341\307M?\306\026+?\376\071@?`\\\350>\266c\034\277\272\032\315?\232\224n?\352j\251\277v\226,>6\372\065?\246\321\016?\250\307\067\277\373\341\003\300\030<\226?^i\200?"..., 
        raw_const = 0x7ffff6cdb650 "]\222\270\276\062\066\201?61\276?ĵ1?\357!T?^ɤ?\030\254\360?.U\210?\225R\251\276\216L\202\277\245\377\006?`\222\037>\352\357\276>F\267\221\277\274]C>\372\243־\n\343\201?J\a\340?yʱ?\262f\345?\342W\r?xI\027?\370½>\361O\002\277\220%\313=l\322i\276\207S\214?)\260\272?s\f\235>\\\275+\277@?\336<\275\255\374\276D%\274?\362\231\221?\036\003\315?\341\307M?\306\026+?\376\071@?`\\\350>\266c\034\277\272\032\315?\232\224n?\352j\251\277v\226,>6\372\065?\246\321\016?\250\307\067\277\373\341\003\300\030<\226?^i\200?"..., 
        uint8 = 0x7ffff6cdb650 "]\222\270\276\062\066\201?61\276?ĵ1?\357!T?^ɤ?\030\254\360?.U\210?\225R\251\276\216L\202\277\245\377\006?`\222\037>\352\357\276>F\267\221\277\274]C>\372\243־\n\343\201?J\a\340?yʱ?\262f\345?\342W\r?xI\027?\370½>\361O\002\277\220%\313=l\322i\276\207S\214?)\260\272?s\f\235>\\\275+\277@?\336<\275\255\374\276D%\274?\362\231\221?\036\003\315?\341\307M?\306\026+?\376\071@?`\\\350>\266c\034\277\272\032\315?\232\224n?\352j\251\277v\226,>6\372\065?\246\321\016?\250\307\067\277\373\341\003\300\030<\226?^i\200?"..., 
        b = 0x7ffff6cdb650, 
        i16 = 0x7ffff6cdb650, 
        c64 = 0x7ffff6cdb650, 
        c128 = 0x7ffff6cdb650, 
        int8 = 0x7ffff6cdb650 "]\222\270\276\062\066\201?61\276?ĵ1?\357!T?^ɤ?\030\254\360?.U\210?\225R\251\276\216L\202\277\245\377\006?`\222\037>\352\357\276>F\267\221\277\274]C>\372\243־\n\343\201?J\a\340?yʱ?\262f\345?\342W\r?xI\027?\370½>\361O\002\277\220%\313=l\322i\276\207S\214?)\260\272?s\f\235>\\\275+\277@?\336<\275\255\374\276D%\274?\362\231\221?\036\003\315?\341\307M?\306\026+?\376\071@?`\\\350>\266c\034\277\272\032\315?\232\224n?\352j\251\277v\226,>6\372\065?\246\321\016?\250\307\067\277\373\341\003\300\030<\226?^i\200?"..., 
        data = 0x7ffff6cdb650
      }, 
      dims = 0xe8e130, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 2048, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce5e3c "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/Conv2D_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8e0d0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 401408, 
      allocation = 0x0, 
      name = 0x7ffff6ce44fc "MobilenetV1/MobilenetV1/Conv2d_7_pointwise/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8e170
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe93310, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 401408, 
      allocation = 0x0, 
      name = 0x7ffff6ce4628 "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8e1b0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6cdbe5c, 
        u32 = 0x7ffff6cdbe5c, 
        i64 = 0x7ffff6cdbe5c, 
        u64 = 0x7ffff6cdbe5c, 
        f = 0x7ffff6cdbe5c, 
        f16 = 0x7ffff6cdbe5c, 
        f64 = 0x7ffff6cdbe5c, 
        raw = 0x7ffff6cdbe5c "3\215\a?\032\065\370\276p'\262>\334\375迊W\333?7\313\301?\264\064\272\277F\375\241\277\254\373\226?`\230\360\276\215ˉ\276\365M\362?0\264\306?\250\307\335?\020\233", 
        raw_const = 0x7ffff6cdbe5c "3\215\a?\032\065\370\276p'\262>\334\375迊W\333?7\313\301?\264\064\272\277F\375\241\277\254\373\226?`\230\360\276\215ˉ\276\365M\362?0\264\306?\250\307\335?\020\233", 
        uint8 = 0x7ffff6cdbe5c "3\215\a?\032\065\370\276p'\262>\334\375迊W\333?7\313\301?\264\064\272\277F\375\241\277\254\373\226?`\230\360\276\215ˉ\276\365M\362?0\264\306?\250\307\335?\020\233", 
        b = 0x7ffff6cdbe5c, 
        i16 = 0x7ffff6cdbe5c, 
        c64 = 0x7ffff6cdbe5c, 
        c128 = 0x7ffff6cdbe5c, 
        int8 = 0x7ffff6cdbe5c "3\215\a?\032\065\370\276p'\262>\334\375迊W\333?7\313\301?\264\064\272\277F\375\241\277\254\373\226?`\230\360\276\215ˉ\276\365M\362?0\264\306?\250\307\335?\020\233", 
        data = 0x7ffff6cdbe5c
      }, 
      dims = 0xe8e1d0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 2048, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce5e98 "MobilenetV1/MobilenetV1/Conv2d_8_depthwise/depthwise_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff6cdc668, 
        u32 = 0x7ffff6cdc668, 
        i64 = 0x7ffff6cdc668, 
        u64 = 0x7ffff6cdc668, 
        f = 0x7ffff6cdc668, 
        f16 = 0x7ffff6cdc668, 
        f64 = 0x7ffff6cdc668, 
        raw = 0x7ffff6cdc668 "\205٩>\va\301\277\177\355E?y\257\060?\247\353\324?\024\300\224>\032ƅ\277ր7>ȺH>:Y\206>\372\365\232\277\277\234\277\277\354*\340\276(\224\202\277\236\362\260?\216\217\251?~\253\204>.\212\236\276\064\063ֿWx\255\277X\373\223=", 
        raw_const = 0x7ffff6cdc668 "\205٩>\va\301\277\177\355E?y\257\060?\247\353\324?\024\300\224>\032ƅ\277ր7>ȺH>:Y\206>\372\365\232\277\277\234\277\277\354*\340\276(\224\202\277\236\362\260?\216\217\251?~\253\204>.\212\236\276\064\063ֿWx\255\277X\373\223=", 
        uint8 = 0x7ffff6cdc668 "\205٩>\va\301\277\177\355E?y\257\060?\247\353\324?\024\300\224>\032ƅ\277ր7>ȺH>:Y\206>\372\365\232\277\277\234\277\277\354*\340\276(\224\202\277\236\362\260?\216\217\251?~\253\204>.\212\236\276\064\063ֿWx\255\277X\373\223=", 
        b = 0x7ffff6cdc668, 
        i16 = 0x7ffff6cdc668, 
        c64 = 0x7ffff6cdc668, 
        c128 = 0x7ffff6cdc668, 
        int8 = 0x7ffff6cdc668 "\205٩>\va\301\277\177\355E?y\257\060?\247\353\324?\024\300\224>\032ƅ\277ր7>ȺH>:Y\206>\372\365\232\277\277\234\277\277\354*\340\276(\224\202\277\236\362\260?\216\217\251?~\253\204>.\212\236\276\064\063ֿWx\255\277X\373\223=", 
        data = 0x7ffff6cdc668
      }, 
      dims = 0xe8e1f0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 2048, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce5ef8 "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/Conv2D_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8e190, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 401408, 
      allocation = 0x0, 
      name = 0x7ffff6ce4d54 "MobilenetV1/MobilenetV1/Conv2d_8_pointwise/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8e230
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe93330, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 401408, 
      allocation = 0x0, 
      name = 0x7ffff6ce4b60 "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8e270
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff65a7828, 
        u32 = 0x7ffff65a7828, 
        i64 = 0x7ffff65a7828, 
        u64 = 0x7ffff65a7828, 
        f = 0x7ffff65a7828, 
        f16 = 0x7ffff65a7828, 
        f64 = 0x7ffff65a7828, 
        raw = 0x7ffff65a7828 "$\f{?\244O\244\276D\024Z?\344Ӆ\277fc\234?\320\361\241?>vo\277y?\242?\317}\366?\302\065־\274\237\021@EKl\277@y\200\274\356\360\035\276\320պ\277\374l\002\300w|P\277\210.L\300`r\201\277\003\227\256?\f7\247?\210\256\220\277", 
        raw_const = 0x7ffff65a7828 "$\f{?\244O\244\276D\024Z?\344Ӆ\277fc\234?\320\361\241?>vo\277y?\242?\317}\366?\302\065־\274\237\021@EKl\277@y\200\274\356\360\035\276\320պ\277\374l\002\300w|P\277\210.L\300`r\201\277\003\227\256?\f7\247?\210\256\220\277", 
        uint8 = 0x7ffff65a7828 "$\f{?\244O\244\276D\024Z?\344Ӆ\277fc\234?\320\361\241?>vo\277y?\242?\317}\366?\302\065־\274\237\021@EKl\277@y\200\274\356\360\035\276\320պ\277\374l\002\300w|P\277\210.L\300`r\201\277\003\227\256?\f7\247?\210\256\220\277", 
        b = 0x7ffff65a7828, 
        i16 = 0x7ffff65a7828, 
        c64 = 0x7ffff65a7828, 
        c128 = 0x7ffff65a7828, 
        int8 = 0x7ffff65a7828 "$\f{?\244O\244\276D\024Z?\344Ӆ\277fc\234?\320\361\241?>vo\277y?\242?\317}\366?\302\065־\274\237\021@EKl\277@y\200\274\356\360\035\276\320պ\277\374l\002\300w|P\277\210.L\300`r\201\277\003\227\256?\f7\247?\210\256\220\277", 
        data = 0x7ffff65a7828
      }, 
      dims = 0xe8e290, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 2048, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce52a0 "MobilenetV1/MobilenetV1/Conv2d_9_depthwise/depthwise_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff67ee980, 
        u32 = 0x7ffff67ee980, 
        i64 = 0x7ffff67ee980, 
        u64 = 0x7ffff67ee980, 
        f = 0x7ffff67ee980, 
        f16 = 0x7ffff67ee980, 
        f64 = 0x7ffff67ee980, 
        raw = 0x7ffff67ee980 "@\\%\274X\214\b?r\327,\277\037\227\372\276R+\201? \376\a?y\346<?o\254\266?J0I\277\064\360\231\277`\222\023\277\250\211,\277\334\327\066\300{\235\250>\330p\217\277", <incomplete sequence \354>, 
        raw_const = 0x7ffff67ee980 "@\\%\274X\214\b?r\327,\277\037\227\372\276R+\201? \376\a?y\346<?o\254\266?J0I\277\064\360\231\277`\222\023\277\250\211,\277\334\327\066\300{\235\250>\330p\217\277", <incomplete sequence \354>, 
        uint8 = 0x7ffff67ee980 "@\\%\274X\214\b?r\327,\277\037\227\372\276R+\201? \376\a?y\346<?o\254\266?J0I\277\064\360\231\277`\222\023\277\250\211,\277\334\327\066\300{\235\250>\330p\217\277", <incomplete sequence \354>, 
        b = 0x7ffff67ee980, 
        i16 = 0x7ffff67ee980, 
        c64 = 0x7ffff67ee980, 
        c128 = 0x7ffff67ee980, 
        int8 = 0x7ffff67ee980 "@\\%\274X\214\b?r\327,\277\037\227\372\276R+\201? \376\a?y\346<?o\254\266?J0I\277\064\360\231\277`\222\023\277\250\211,\277\334\327\066\300{\235\250>\330p\217\277", <incomplete sequence \354>, 
        data = 0x7ffff67ee980
      }, 
      dims = 0xe8e2b0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteMmapRo, 
      bytes = 2048, 
      allocation = 0xe7cc90, 
      name = 0x7ffff6ce5588 "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/Conv2D_bias", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8e250, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 401408, 
      allocation = 0x0, 
      name = 0x7ffff6ce4208 "MobilenetV1/MobilenetV1/Conv2d_9_pointwise/Relu6", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8e2f0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff4a33040, 
        u32 = 0x7ffff4a33040, 
        i64 = 0x7ffff4a33040, 
        u64 = 0x7ffff4a33040, 
        f = 0x7ffff4a33040, 
        f16 = 0x7ffff4a33040, 
        f64 = 0x7ffff4a33040, 
        raw = 0x7ffff4a33040 "", 
        raw_const = 0x7ffff4a33040 "", 
        uint8 = 0x7ffff4a33040 "", 
        b = 0x7ffff4a33040, 
        i16 = 0x7ffff4a33040, 
        c64 = 0x7ffff4a33040, 
        c128 = 0x7ffff4a33040, 
        int8 = 0x7ffff4a33040 "", 
        data = 0x7ffff4a33040
      }, 
      dims = 0xe8d8b0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 4004, 
      allocation = 0x0, 
      name = 0x7ffff6ce5aa8 "MobilenetV1/Predictions/Reshape_1", 
      delegate = 0xe914c0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8e330
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x7ffff49a0040, 
        u32 = 0x7ffff49a0040, 
        i64 = 0x7ffff49a0040, 
        u64 = 0x7ffff49a0040, 
        f = 0x7ffff49a0040, 
        f16 = 0x7ffff49a0040, 
        f64 = 0x7ffff49a0040, 
        raw = 0x7ffff49a0040 "", 
        raw_const = 0x7ffff49a0040 "", 
        uint8 = 0x7ffff49a0040 "", 
        b = 0x7ffff49a0040, 
        i16 = 0x7ffff49a0040, 
        c64 = 0x7ffff49a0040, 
        c128 = 0x7ffff49a0040, 
        int8 = 0x7ffff49a0040 "", 
        data = 0x7ffff49a0040
      }, 
      dims = 0xe8e350, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRw, 
      bytes = 602112, 
      allocation = 0x0, 
      name = 0x7ffff6ce42d0 "input", 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x4d8d00 <std::vector<int, std::allocator<int> >::_M_move_assign(std::vector<int, std::allocator<int> >&&, std::integral_constant<bool, true>)+170>
      }, 
      sparsity = 0x0, 
      dims_signature = 0xe8e370
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8d910, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRwPersistent, 
      bytes = 3456, 
      allocation = 0x0, 
      name = 0x0, 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x0
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8dcd0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRwPersistent, 
      bytes = 8192, 
      allocation = 0x0, 
      name = 0x0, 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x0
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8dd90, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRwPersistent, 
      bytes = 32768, 
      allocation = 0x0, 
      name = 0x0, 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x0
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8de50, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRwPersistent, 
      bytes = 65536, 
      allocation = 0x0, 
      name = 0x0, 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x0
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8df10, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRwPersistent, 
      bytes = 131072, 
      allocation = 0x0, 
      name = 0x0, 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x0
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8dfd0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRwPersistent, 
      bytes = 262144, 
      allocation = 0x0, 
      name = 0x0, 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x0
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8e090, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRwPersistent, 
      bytes = 524288, 
      allocation = 0x0, 
      name = 0x0, 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x0
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8e150, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRwPersistent, 
      bytes = 1048576, 
      allocation = 0x0, 
      name = 0x0, 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x0
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8e210, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRwPersistent, 
      bytes = 1048576, 
      allocation = 0x0, 
      name = 0x0, 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x0
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8e2d0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRwPersistent, 
      bytes = 1048576, 
      allocation = 0x0, 
      name = 0x0, 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x0
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8d9d0, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRwPersistent, 
      bytes = 1048576, 
      allocation = 0x0, 
      name = 0x0, 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x0
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8da90, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRwPersistent, 
      bytes = 1048576, 
      allocation = 0x0, 
      name = 0x0, 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x0
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8db50, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRwPersistent, 
      bytes = 2097152, 
      allocation = 0x0, 
      name = 0x0, 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x0
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8dc10, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRwPersistent, 
      bytes = 4194304, 
      allocation = 0x0, 
      name = 0x0, 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x0
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }, {
      type = kTfLiteFloat32, 
      data = {
        i32 = 0x0, 
        u32 = 0x0, 
        i64 = 0x0, 
        u64 = 0x0, 
        f = 0x0, 
        f16 = 0x0, 
        f64 = 0x0, 
        raw = 0x0, 
        raw_const = 0x0, 
        uint8 = 0x0, 
        b = 0x0, 
        i16 = 0x0, 
        c64 = 0x0, 
        c128 = 0x0, 
        int8 = 0x0, 
        data = 0x0
      }, 
      dims = 0xe8d830, 
      params = {
        scale = 0, 
        zero_point = 0
      }, 
      allocation_type = kTfLiteArenaRwPersistent, 
      bytes = 4100096, 
      allocation = 0x0, 
      name = 0x0, 
      delegate = 0x0, 
      buffer_handle = -1, 
      data_is_stale = false, 
      is_variable = false, 
      quantization = {
        type = kTfLiteNoQuantization, 
        params = 0x0
      }, 
      sparsity = 0x0, 
      dims_signature = 0x0
    }}, 
  state_ = tflite::Subgraph::kStateInvokableAndImmutable, 
  context_ = {
    tensors_size = 103, 
    GetExecutionPlan = 0x516f7f <tflite::Subgraph::<lambda(TfLiteContext*, TfLiteIntArray**)>::_FUN(TfLiteContext *, TfLiteIntArray **)>, 
    tensors = 0xe85430, 
    impl_ = 0xe851b0, 
    ResizeTensor = 0x515f92 <tflite::Subgraph::ResizeTensor(TfLiteContext*, TfLiteTensor*, TfLiteIntArray*)>, 
    ReportError = 0x516070 <tflite::Subgraph::ReportErrorC(TfLiteContext*, char const*, ...)>, 
    AddTensors = 0x51634c <tflite::Subgraph::AddTensors(TfLiteContext*, int, int*)>, 
    GetNodeAndRegistration = 0x516e86 <tflite::Subgraph::<lambda(TfLiteContext*, int, TfLiteNode**, TfLiteRegistration**)>::_FUN(TfLiteContext *, int, TfLiteNode **, TfLiteRegistration **)>, 
    ReplaceNodeSubsetsWithDelegateKernels = 0x516efb <tflite::Subgraph::<lambda(TfLiteContext*, TfLiteRegistration, const TfLiteIntArray*, TfLiteDelegate*)>::_FUN(TfLiteContext *, TfLiteRegistration, const TfLiteIntArray *, TfLiteDelegate *)>, 
    recommended_num_threads = -1, 
    GetExternalContext = 0x5139aa <tflite::Subgraph::GetExternalContext(TfLiteContext*, TfLiteExternalContextType)>, 
    SetExternalContext = 0x513a10 <tflite::Subgraph::SetExternalContext(TfLiteContext*, TfLiteExternalContextType, TfLiteExternalContext*)>, 
    allow_fp32_relax_to_fp16 = false, 
    profiler = 0x0, 
    AllocatePersistentBuffer = 0x0, 
    AllocateBufferForEval = 0x0, 
    RequestScratchBufferInArena = 0x0, 
    GetScratchBuffer = 0x0, 
    ResizeTensorExplicit = 0x0, 
    PreviewDelegatePartitioning = 0x516fe7 <tflite::Subgraph::<lambda(TfLiteContext*, const TfLiteIntArray*, TfLiteDelegateParams**, int*)>::_FUN(TfLiteContext *, const TfLiteIntArray *, TfLiteDelegateParams **, int *)>, 
    GetTensor = 0x0, 
    GetEvalTensor = 0x0, 
    GetModelMetadata = 0x513e06 <tflite::Subgraph::GetModelMetadata(TfLiteContext const*, char const*, char const**, unsigned long*)>
  }, 
  external_contexts_ = 0xe85030, 
  nodes_and_registration_ = std::vector of length 33, capacity 128 = {{
      first = {
        inputs = 0xe8e3d0, 
        outputs = 0xe8e3f0, 
        intermediates = 0xe8e410, 
        temporaries = 0xe8e430, 
        user_data = 0xe8e450, 
        builtin_data = 0xe8d470, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x5ba32e <tflite::ops::builtin::conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x5ba373 <tflite::ops::builtin::conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x5c7b59 <tflite::ops::builtin::conv::Prepare<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x5c7b80 <tflite::ops::builtin::conv::Eval<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 3, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe8e590, 
        outputs = 0xe8e5b0, 
        intermediates = 0xe8e5d0, 
        temporaries = 0xe8e5f0, 
        user_data = 0xe8e610, 
        builtin_data = 0xe8e560, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x667ecd <tflite::ops::builtin::depthwise_conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x667f01 <tflite::ops::builtin::depthwise_conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x667f38 <tflite::ops::builtin::depthwise_conv::Prepare(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x66fd18 <tflite::ops::builtin::depthwise_conv::Eval<(tflite::ops::builtin::depthwise_conv::KernelType)1>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 4, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe8e6a0, 
        outputs = 0xe8e6c0, 
        intermediates = 0xe8e6e0, 
        temporaries = 0xe8e700, 
        user_data = 0xe8e720, 
        builtin_data = 0xe8e390, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x5ba32e <tflite::ops::builtin::conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x5ba373 <tflite::ops::builtin::conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x5c7b59 <tflite::ops::builtin::conv::Prepare<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x5c7b80 <tflite::ops::builtin::conv::Eval<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 3, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe8e680, 
        outputs = 0xe8e810, 
        intermediates = 0xe8e830, 
        temporaries = 0xe8e850, 
        user_data = 0xe8e870, 
        builtin_data = 0xe8e7e0, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x667ecd <tflite::ops::builtin::depthwise_conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x667f01 <tflite::ops::builtin::depthwise_conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x667f38 <tflite::ops::builtin::depthwise_conv::Prepare(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x66fd18 <tflite::ops::builtin::depthwise_conv::Eval<(tflite::ops::builtin::depthwise_conv::KernelType)1>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 4, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe8e900, 
        outputs = 0xe8e920, 
        intermediates = 0xe8e940, 
        temporaries = 0xe8e960, 
        user_data = 0xe8e980, 
        builtin_data = 0xe8e3b0, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x5ba32e <tflite::ops::builtin::conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x5ba373 <tflite::ops::builtin::conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x5c7b59 <tflite::ops::builtin::conv::Prepare<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x5c7b80 <tflite::ops::builtin::conv::Eval<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 3, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe8e7c0, 
        outputs = 0xe8ea80, 
        intermediates = 0xe8eaa0, 
        temporaries = 0xe8eac0, 
        user_data = 0xe8eae0, 
        builtin_data = 0xe8ea50, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x667ecd <tflite::ops::builtin::depthwise_conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x667f01 <tflite::ops::builtin::depthwise_conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x667f38 <tflite::ops::builtin::depthwise_conv::Prepare(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x66fd18 <tflite::ops::builtin::depthwise_conv::Eval<(tflite::ops::builtin::depthwise_conv::KernelType)1>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 4, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe8eb70, 
        outputs = 0xe8eb90, 
        intermediates = 0xe8ebb0, 
        temporaries = 0xe8ebd0, 
        user_data = 0xe8ebf0, 
        builtin_data = 0xe8e540, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x5ba32e <tflite::ops::builtin::conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x5ba373 <tflite::ops::builtin::conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x5c7b59 <tflite::ops::builtin::conv::Prepare<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x5c7b80 <tflite::ops::builtin::conv::Eval<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 3, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe8ecc0, 
        outputs = 0xe8ece0, 
        intermediates = 0xe8ed00, 
        temporaries = 0xe8ed20, 
        user_data = 0xe8ed40, 
        builtin_data = 0xe8ec90, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x667ecd <tflite::ops::builtin::depthwise_conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x667f01 <tflite::ops::builtin::depthwise_conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x667f38 <tflite::ops::builtin::depthwise_conv::Prepare(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x66fd18 <tflite::ops::builtin::depthwise_conv::Eval<(tflite::ops::builtin::depthwise_conv::KernelType)1>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 4, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe8edd0, 
        outputs = 0xe8edf0, 
        intermediates = 0xe8ee10, 
        temporaries = 0xe8ee30, 
        user_data = 0xe8ee50, 
        builtin_data = 0xe8e8e0, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x5ba32e <tflite::ops::builtin::conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x5ba373 <tflite::ops::builtin::conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x5c7b59 <tflite::ops::builtin::conv::Prepare<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x5c7b80 <tflite::ops::builtin::conv::Eval<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 3, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe8ef40, 
        outputs = 0xe8ef60, 
        intermediates = 0xe8ef80, 
        temporaries = 0xe8efa0, 
        user_data = 0xe8efc0, 
        builtin_data = 0xe8ea20, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x667ecd <tflite::ops::builtin::depthwise_conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x667f01 <tflite::ops::builtin::depthwise_conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x667f38 <tflite::ops::builtin::depthwise_conv::Prepare(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x66fd18 <tflite::ops::builtin::depthwise_conv::Eval<(tflite::ops::builtin::depthwise_conv::KernelType)1>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 4, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe8f050, 
        outputs = 0xe8f070, 
        intermediates = 0xe8f090, 
        temporaries = 0xe8f0b0, 
        user_data = 0xe8f0d0, 
        builtin_data = 0xe8eb50, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x5ba32e <tflite::ops::builtin::conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x5ba373 <tflite::ops::builtin::conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x5c7b59 <tflite::ops::builtin::conv::Prepare<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x5c7b80 <tflite::ops::builtin::conv::Eval<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 3, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe8f1a0, 
        outputs = 0xe8f1c0, 
        intermediates = 0xe8f1e0, 
        temporaries = 0xe8f200, 
        user_data = 0xe8f220, 
        builtin_data = 0xe8f170, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x667ecd <tflite::ops::builtin::depthwise_conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x667f01 <tflite::ops::builtin::depthwise_conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x667f38 <tflite::ops::builtin::depthwise_conv::Prepare(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x66fd18 <tflite::ops::builtin::depthwise_conv::Eval<(tflite::ops::builtin::depthwise_conv::KernelType)1>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 4, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe8f2b0, 
        outputs = 0xe8f2d0, 
        intermediates = 0xe8f2f0, 
        temporaries = 0xe8f310, 
        user_data = 0xe8f330, 
        builtin_data = 0xe8edb0, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x5ba32e <tflite::ops::builtin::conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x5ba373 <tflite::ops::builtin::conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x5c7b59 <tflite::ops::builtin::conv::Prepare<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x5c7b80 <tflite::ops::builtin::conv::Eval<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 3, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe8f400, 
        outputs = 0xe8f420, 
        intermediates = 0xe8f440, 
        temporaries = 0xe8f460, 
        user_data = 0xe8f480, 
        builtin_data = 0xe8f3d0, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x667ecd <tflite::ops::builtin::depthwise_conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x667f01 <tflite::ops::builtin::depthwise_conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x667f38 <tflite::ops::builtin::depthwise_conv::Prepare(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x66fd18 <tflite::ops::builtin::depthwise_conv::Eval<(tflite::ops::builtin::depthwise_conv::KernelType)1>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 4, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe8f510, 
        outputs = 0xe8f530, 
        intermediates = 0xe8f550, 
        temporaries = 0xe8f570, 
        user_data = 0xe8f590, 
        builtin_data = 0xe8f030, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x5ba32e <tflite::ops::builtin::conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x5ba373 <tflite::ops::builtin::conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x5c7b59 <tflite::ops::builtin::conv::Prepare<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x5c7b80 <tflite::ops::builtin::conv::Eval<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 3, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe8f660, 
        outputs = 0xe8f680, 
        intermediates = 0xe8f6a0, 
        temporaries = 0xe8f6c0, 
        user_data = 0xe8f6e0, 
        builtin_data = 0xe8f630, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x667ecd <tflite::ops::builtin::depthwise_conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x667f01 <tflite::ops::builtin::depthwise_conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x667f38 <tflite::ops::builtin::depthwise_conv::Prepare(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x66fd18 <tflite::ops::builtin::depthwise_conv::Eval<(tflite::ops::builtin::depthwise_conv::KernelType)1>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 4, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe8f770, 
        outputs = 0xe8f790, 
        intermediates = 0xe8f7b0, 
        temporaries = 0xe8f7d0, 
        user_data = 0xe8f7f0, 
        builtin_data = 0xe8f290, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x5ba32e <tflite::ops::builtin::conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x5ba373 <tflite::ops::builtin::conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x5c7b59 <tflite::ops::builtin::conv::Prepare<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x5c7b80 <tflite::ops::builtin::conv::Eval<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 3, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe8f950, 
        outputs = 0xe8f970, 
        intermediates = 0xe8f990, 
        temporaries = 0xe8f9b0, 
        user_data = 0xe8f9d0, 
        builtin_data = 0xe8f920, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x667ecd <tflite::ops::builtin::depthwise_conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x667f01 <tflite::ops::builtin::depthwise_conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x667f38 <tflite::ops::builtin::depthwise_conv::Prepare(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x66fd18 <tflite::ops::builtin::depthwise_conv::Eval<(tflite::ops::builtin::depthwise_conv::KernelType)1>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 4, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe8fa60, 
        outputs = 0xe8fa80, 
        intermediates = 0xe8faa0, 
        temporaries = 0xe8fac0, 
        user_data = 0xe8fae0, 
        builtin_data = 0xe8f4f0, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x5ba32e <tflite::ops::builtin::conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x5ba373 <tflite::ops::builtin::conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x5c7b59 <tflite::ops::builtin::conv::Prepare<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x5c7b80 <tflite::ops::builtin::conv::Eval<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 3, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe8fbb0, 
        outputs = 0xe8fbd0, 
        intermediates = 0xe8fbf0, 
        temporaries = 0xe8fc10, 
        user_data = 0xe8fc30, 
        builtin_data = 0xe8fb80, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x667ecd <tflite::ops::builtin::depthwise_conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x667f01 <tflite::ops::builtin::depthwise_conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x667f38 <tflite::ops::builtin::depthwise_conv::Prepare(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x66fd18 <tflite::ops::builtin::depthwise_conv::Eval<(tflite::ops::builtin::depthwise_conv::KernelType)1>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 4, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe8fcc0, 
        outputs = 0xe8fce0, 
        intermediates = 0xe8fd00, 
        temporaries = 0xe8fd20, 
        user_data = 0xe8fd40, 
        builtin_data = 0xe8f750, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x5ba32e <tflite::ops::builtin::conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x5ba373 <tflite::ops::builtin::conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x5c7b59 <tflite::ops::builtin::conv::Prepare<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x5c7b80 <tflite::ops::builtin::conv::Eval<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 3, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe8fe10, 
        outputs = 0xe8fe30, 
        intermediates = 0xe8fe50, 
        temporaries = 0xe8fe70, 
        user_data = 0xe8fe90, 
        builtin_data = 0xe8fde0, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x667ecd <tflite::ops::builtin::depthwise_conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x667f01 <tflite::ops::builtin::depthwise_conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x667f38 <tflite::ops::builtin::depthwise_conv::Prepare(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x66fd18 <tflite::ops::builtin::depthwise_conv::Eval<(tflite::ops::builtin::depthwise_conv::KernelType)1>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 4, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe8ff20, 
        outputs = 0xe8ff40, 
        intermediates = 0xe8ff60, 
        temporaries = 0xe8ff80, 
        user_data = 0xe8ffa0, 
        builtin_data = 0xe8fa40, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x5ba32e <tflite::ops::builtin::conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x5ba373 <tflite::ops::builtin::conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x5c7b59 <tflite::ops::builtin::conv::Prepare<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x5c7b80 <tflite::ops::builtin::conv::Eval<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 3, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe90070, 
        outputs = 0xe90090, 
        intermediates = 0xe900b0, 
        temporaries = 0xe900d0, 
        user_data = 0xe900f0, 
        builtin_data = 0xe90040, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x667ecd <tflite::ops::builtin::depthwise_conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x667f01 <tflite::ops::builtin::depthwise_conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x667f38 <tflite::ops::builtin::depthwise_conv::Prepare(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x66fd18 <tflite::ops::builtin::depthwise_conv::Eval<(tflite::ops::builtin::depthwise_conv::KernelType)1>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 4, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe90180, 
        outputs = 0xe901a0, 
        intermediates = 0xe901c0, 
        temporaries = 0xe901e0, 
        user_data = 0xe90200, 
        builtin_data = 0xe8fca0, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x5ba32e <tflite::ops::builtin::conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x5ba373 <tflite::ops::builtin::conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x5c7b59 <tflite::ops::builtin::conv::Prepare<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x5c7b80 <tflite::ops::builtin::conv::Eval<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 3, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe902d0, 
        outputs = 0xe902f0, 
        intermediates = 0xe90310, 
        temporaries = 0xe90330, 
        user_data = 0xe90350, 
        builtin_data = 0xe902a0, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x667ecd <tflite::ops::builtin::depthwise_conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x667f01 <tflite::ops::builtin::depthwise_conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x667f38 <tflite::ops::builtin::depthwise_conv::Prepare(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x66fd18 <tflite::ops::builtin::depthwise_conv::Eval<(tflite::ops::builtin::depthwise_conv::KernelType)1>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 4, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe903e0, 
        outputs = 0xe90400, 
        intermediates = 0xe90420, 
        temporaries = 0xe90440, 
        user_data = 0xe90460, 
        builtin_data = 0xe8ff00, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x5ba32e <tflite::ops::builtin::conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x5ba373 <tflite::ops::builtin::conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x5c7b59 <tflite::ops::builtin::conv::Prepare<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x5c7b80 <tflite::ops::builtin::conv::Eval<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 3, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe90530, 
        outputs = 0xe90550, 
        intermediates = 0xe90570, 
        temporaries = 0xe90590, 
        user_data = 0xe905b0, 
        builtin_data = 0xe90500, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x7280b7 <tflite::ops::builtin::pooling::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x7280d7 <tflite::ops::builtin::pooling::Free(TfLiteContext*, void*)>, 
        prepare = 0x72d834 <tflite::ops::builtin::pooling::GenericPrepare<(tflite::ops::builtin::pooling::PoolType)0>(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x72e9b1 <tflite::ops::builtin::pooling::AverageEval<(tflite::ops::builtin::pooling::KernelType)1>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 1, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe905f0, 
        outputs = 0xe90610, 
        intermediates = 0xe90630, 
        temporaries = 0xe90650, 
        user_data = 0xe90670, 
        builtin_data = 0xe90160, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x5ba32e <tflite::ops::builtin::conv::Init(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x5ba373 <tflite::ops::builtin::conv::Free(TfLiteContext*, void*)>, 
        prepare = 0x5c7b59 <tflite::ops::builtin::conv::Prepare<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x5c7b80 <tflite::ops::builtin::conv::Eval<(tflite::ops::builtin::conv::KernelType)2>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 3, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe90740, 
        outputs = 0xe90760, 
        intermediates = 0xe90780, 
        temporaries = 0xe907a0, 
        user_data = 0x0, 
        builtin_data = 0xe90710, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x0, 
        free = 0x0, 
        prepare = 0x453b08 <tflite::ops::builtin::squeeze::Prepare(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x453e8b <tflite::ops::builtin::squeeze::Eval(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 43, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe907e0, 
        outputs = 0xe90800, 
        intermediates = 0xe90820, 
        temporaries = 0xe90840, 
        user_data = 0xe90860, 
        builtin_data = 0xe903c0, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0x0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x53cf9b <tflite::ops::builtin::activations::SoftmaxInit(TfLiteContext*, char const*, unsigned long)>, 
        free = 0x53cfcf <tflite::ops::builtin::activations::SoftmaxFree(TfLiteContext*, void*)>, 
        prepare = 0x54b78d <tflite::ops::builtin::activations::SoftmaxPrepare<(tflite::ops::builtin::activations::KernelType)1>(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x54be2c <tflite::ops::builtin::activations::SoftmaxEval<(tflite::ops::builtin::activations::KernelType)1>(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 25, 
        custom_name = 0x0, 
        version = 1
      }
    }, {
      first = {
        inputs = 0xe93750, 
        outputs = 0xe93840, 
        intermediates = 0xe93860, 
        temporaries = 0xe93880, 
        user_data = 0xe9e410, 
        builtin_data = 0xe935c0, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0xe914c0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x52dc9a <tflite::xnnpack::(anonymous namespace)::SubgraphInit(TfLiteContext*, char const*, size_t)>, 
        free = 0x52dd7d <tflite::xnnpack::(anonymous namespace)::SubgraphFree(TfLiteContext*, void*)>, 
        prepare = 0x52dcd5 <tflite::xnnpack::(anonymous namespace)::SubgraphPrepare(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x52dd13 <tflite::xnnpack::(anonymous namespace)::SubgraphInvoke(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 51, 
        custom_name = 0xa64501 "TfLiteXNNPackDelegate", 
        version = 2
      }
    }, {
      first = {
        inputs = 0xe94460, 
        outputs = 0xe938a0, 
        intermediates = 0xe94480, 
        temporaries = 0xe938c0, 
        user_data = 0xea3290, 
        builtin_data = 0xe9e4b0, 
        custom_initial_data = 0x0, 
        custom_initial_data_size = 0, 
        delegate = 0xe914c0, 
        might_have_side_effect = false
      },
      second = {
        init = 0x52dc9a <tflite::xnnpack::(anonymous namespace)::SubgraphInit(TfLiteContext*, char const*, size_t)>, 
        free = 0x52dd7d <tflite::xnnpack::(anonymous namespace)::SubgraphFree(TfLiteContext*, void*)>, 
        prepare = 0x52dcd5 <tflite::xnnpack::(anonymous namespace)::SubgraphPrepare(TfLiteContext*, TfLiteNode*)>, 
        invoke = 0x52dd13 <tflite::xnnpack::(anonymous namespace)::SubgraphInvoke(TfLiteContext*, TfLiteNode*)>, 
        profiling_string = 0x0, 
        builtin_code = 51, 
        custom_name = 0xa64501 "TfLiteXNNPackDelegate", 
        version = 2
      }
    }}, 
  consistent_ = true, 
  inputs_ = std::vector of length 1, capacity 1 = {87}, 
  outputs_ = std::vector of length 1, capacity 1 = {86}, 
  variables_ = std::vector of length 0, capacity 0, 
  error_reporter_ = 0xe7cc70, 
  next_execution_plan_index_to_prepare_ = 3, 
  next_original_execution_plan_index_to_prepare_ = 0, 
  next_execution_plan_index_to_plan_allocation_ = 3, 
  execution_plan_ = std::vector of length 3, capacity 32 = {31, 29, 32}, 
  pre_delegation_execution_plan_ = std::vector of length 31, capacity 31 = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30}, 
  delegates_applied_ = std::vector of length 1, capacity 1 = {0xe914c0}, 
  delegates_undone_ = false, 
  plan_cache_ = std::unique_ptr<TfLiteIntArray> = {
    get() = 0xe94000
  }, 
  partitioning_preview_cache_ = std::vector of length 0, capacity 0, 
  memory_planner_ = std::unique_ptr<tflite::MemoryPlanner> = {
    get() = 0xe934a0
  }, 
  custom_allocations_ = std::vector of length 0, capacity 0, 
  tensor_resized_since_op_invoke_ = true, 
  profiler_ = std::unique_ptr<tflite::Subgraph::SubgraphAwareProfiler> = {
    get() = 0x0
  }, 
  subgraphs_ = 0xe85058, 
  has_dynamic_tensors_ = false, 
  dynamic_tensor_index_ = -1, 
  check_cancelled_func_ = 0x0, 
  cancellation_data_ = 0x0, 
  resources_ = 0xe85070, 
  resource_ids_ = 0xe850a8, 
  initialization_status_map_ = 0xe850d8, 
  name_ = "", 
  preserve_all_tensors_ = false, 
  metadata_ = 0xe85170
}
Continuing.
[Inferior 1 (process 773240) exited normally]
Starting program: /home/sunyunbo/src/tensorflow/tensorflow/lite/build/study 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Breakpoint 3, tflite::ArenaPlanner::PlanAllocations (this=0xe934a0) at /home/sunyunbo/src/tensorflow/tensorflow/lite/arena_planner.cc:87
87	  dealloc_node_.assign(graph_info_->num_tensors(), kNodeNotAssigned);
$10 = std::unique_ptr<tflite::GraphInfo> = {
  get() = 0xe93be0
}
$11 = {
  _vptr.GraphInfo = 0xe64888 <vtable for tflite::InterpreterInfo+16>
}
Quit
Continuing.

Program received signal SIGINT, Interrupt.
0x00007ffff6dde3c0 in __write_nocancel () at ../sysdeps/unix/syscall-template.S:84
84	in ../sysdeps/unix/syscall-template.S
Please answer y or n.
Starting program: /home/sunyunbo/src/tensorflow/tensorflow/lite/build/study 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Program received signal SIGINT, Interrupt.
0x00007ffff6dde3c0 in __write_nocancel () at ../sysdeps/unix/syscall-template.S:84
84	in ../sysdeps/unix/syscall-template.S
